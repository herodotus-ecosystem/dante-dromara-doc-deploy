import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-_I46_jCL.js";const n={};function l(h,i){return t(),a("div",null,i[0]||(i[0]=[e(`<h2 id="一、基本使用" tabindex="-1"><a class="header-anchor" href="#一、基本使用"><span>一、基本使用</span></a></h2><ol><li>maven 中引入</li></ol><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;cn.herodotus.oss&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;oss-spring-boot-starter&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;最新版本&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置 yml 参数</li></ol><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">herodotus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  oss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    dialect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">minio</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    minio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      endpoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://127.0.0.1:9000</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      access-key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">XXXXXXXXX</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      secret-key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">XXXXXXXXX</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      use-proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      proxy-source-endpoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://localhost:3000/api</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>统一错误处理</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 参考代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> resolveException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ex， </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> path) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> GlobalExceptionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolveException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ex， path);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 或者</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ExceptionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">HerodotusException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">， </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PlatformException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ex， </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request， </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> response) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    ······</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>交互性错误信息反馈</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在系统统一错误处，调用以下代码即可返回包含自定义错误码的、更具交互性错误信息。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (ex </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HerodotusException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> exception) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Result</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(path);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[Herodotus] |- Global Exception Handler, Error is : {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, result);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、选择使用" tabindex="-1"><a class="header-anchor" href="#二、选择使用"><span>二、选择使用</span></a></h2><p>除了 <code>dialect-core</code> 和 <code>oss-specification</code> 模块以外，其它所有模块均可以单独使用。可以根据自身需要，仅选择某个模块进行使用。</p><h3 id="_1-dialect-sdk-aliyun" tabindex="-1"><a class="header-anchor" href="#_1-dialect-sdk-aliyun"><span>1. dialect-sdk-aliyun</span></a></h3><p>包含对 Aliyun 基础 API 封装的 Service 代码, 作为 OSS 统一抽象的实现方式之一，也包含对 Dante Java OSS API 规范的实现代码。可以单独使用，引入 <code>oss-aliyun-spring-boot-starter</code> 可开启自动配置。</p><blockquote><p>目前暂不提供 Aliyun REST API 封装，请根据自身的需要直接申请使用阿里云 REST API 或者使用 Dante OSS 统一 REST API 接口。</p></blockquote><h3 id="_2-dialect-sdk-s3" tabindex="-1"><a class="header-anchor" href="#_2-dialect-sdk-s3"><span>2. dialect-sdk-s3</span></a></h3><p>包含对 Amazon S3 基础 API 封装的 Service 代码, 作为 OSS 统一抽象的实现方式之一，也包含对 Dante Java OSS API 规范的实现代码。可以单独使用，引入 <code>oss-s3-spring-boot-starter</code> 可开启自动配置。</p><blockquote><p>目前暂不提供 Amazon S3 REST API 封装，请根据自身的需要直接申请使用 Amazon S3 REST API 或者使用 Dante OSS 统一 REST API 接口。</p></blockquote><h3 id="_3-dialect-sdk-minio" tabindex="-1"><a class="header-anchor" href="#_3-dialect-sdk-minio"><span>3. dialect-sdk-minio</span></a></h3><p>包含对 Minio 基础 API 封装的 Service 代码, 作为 OSS 统一抽象的实现方式之一，也包含对 Dante Java OSS API 规范的实现代码。</p><p>提供 Minio 标准操作 REST API 封装 <code>rest-sdk-minio</code></p><blockquote><p>注意：<code>rest-sdk-minio</code> 中不包含大文件分片上传通用解决方案业务功能以及符合 Dante Java OSS API 规范的通用功能 REST API</p></blockquote><p>使用 <code>oss-minio-spring-boot-starter</code> 可统一开启 Minio Service 和 REST API 自动配置。</p><h3 id="_4-rest-sdk-minio" tabindex="-1"><a class="header-anchor" href="#_4-rest-sdk-minio"><span>4. rest-sdk-minio</span></a></h3><p>提供 Minio 标准操作 REST API 封装。使用 <code>oss-minio-spring-boot-starter</code> 可统一开启 Minio Service 和 REST API 自动配置。</p><h3 id="_5-rest-sdk-specification" tabindex="-1"><a class="header-anchor" href="#_5-rest-sdk-specification"><span>5. rest-sdk-specification</span></a></h3><p><code>rest-sdk-specification</code> 是通过对 Minio、Aliyun、Amazon S3 现有 API 共性内容进行抽象，提取 Dante Java OSS API 规范定义后，形成的统一操作 REST API。目标是形成类似于 Spring Data Repository 统一形式的 Java OSS API 和 REST API，以期在不修改代码的情况下，以一套 API 就可以支持不同的 OSS 厂商的无缝切换。</p><h3 id="_6-oss-solution" tabindex="-1"><a class="header-anchor" href="#_6-oss-solution"><span>6. oss-solution</span></a></h3><p>是对大文件分片等主流对象存储业务解决方案的高度抽象，以及相关管理操作 Dante Java OSS API 规范封装。使用该模块就可以方便的、快捷的集成或自定义自己大文件分片实现。</p><h3 id="_7-oss-spring-boot-starter" tabindex="-1"><a class="header-anchor" href="#_7-oss-spring-boot-starter"><span>7. oss-spring-boot-starter</span></a></h3><p>Dante OSS 的所有内容，可直接引入使用。以 OSS 共性抽象为基础，通过 Spring Boot 配置，实现不同 OSS 操作实现的切换。目前以 Minio 作为默认实现，同时提供 Minio 相关完整的 REST API。Aliyun 和 Amazon S3 目前仅包含对其 Java SDK 封装的 Service API，作为不同 OSS 实现的可选项。如要使用其 REST API 的方式，请直接按照对应厂商官网文档操作申请即可，暂不考虑将这一部分融入 Dante OSS。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>随着 OSS 共性内容抽象的不断完善，<code>rest-sdk-scenario</code> 中相关的内容，可能会逐步迁移至其它模块中。</p></div>`,31)]))}const k=s(n,[["render",l],["__file","how-to-use.html.vue"]]),d=JSON.parse('{"path":"/ecosphere/oss/how-to-use.html","title":"如何使用","lang":"zh-CN","frontmatter":{"icon":"caret-right","title":"如何使用","tag":["SAS","Spring Authorization Server","Dante Cloud","微服务","领域驱动","DDD","Spring Boot","Spring Cloud","Spring Security","Spring Cloud Alibaba","Spring Cloud Tencent","OAuth2.1","Nacos","Skywalking","Sentinel","Seata"],"description":"一、基本使用 maven 中引入 配置 yml 参数 统一错误处理 交互性错误信息反馈 二、选择使用 除了 dialect-core 和 oss-specification 模块以外，其它所有模块均可以单独使用。可以根据自身需要，仅选择某个模块进行使用。 1. dialect-sdk-aliyun 包含对 Aliyun 基础 API 封装的 Servi...","head":[["meta",{"property":"og:url","content":"https://dante-cloud.dromara.org/ecosphere/oss/how-to-use.html"}],["meta",{"property":"og:site_name","content":"“一套代码、两种架构”基于Apache2.0开源协议的企业级微服务"}],["meta",{"property":"og:title","content":"如何使用"}],["meta",{"property":"og:description","content":"一、基本使用 maven 中引入 配置 yml 参数 统一错误处理 交互性错误信息反馈 二、选择使用 除了 dialect-core 和 oss-specification 模块以外，其它所有模块均可以单独使用。可以根据自身需要，仅选择某个模块进行使用。 1. dialect-sdk-aliyun 包含对 Aliyun 基础 API 封装的 Servi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-05T17:33:07.000Z"}],["meta",{"property":"article:tag","content":"SAS"}],["meta",{"property":"article:tag","content":"Spring Authorization Server"}],["meta",{"property":"article:tag","content":"Dante Cloud"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"领域驱动"}],["meta",{"property":"article:tag","content":"DDD"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"Spring Cloud"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:tag","content":"Spring Cloud Alibaba"}],["meta",{"property":"article:tag","content":"Spring Cloud Tencent"}],["meta",{"property":"article:tag","content":"OAuth2.1"}],["meta",{"property":"article:tag","content":"Nacos"}],["meta",{"property":"article:tag","content":"Skywalking"}],["meta",{"property":"article:tag","content":"Sentinel"}],["meta",{"property":"article:tag","content":"Seata"}],["meta",{"property":"article:modified_time","content":"2025-02-05T17:33:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-05T17:33:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"码匠君\\",\\"url\\":\\"https://gitee.com/dromara/dante-cloud\\"}]}"],["meta",{"name":"keywords","content":"SAS,Spring Authorization Server,Dante Cloud,微服务,DDD,Spring Boot,Spring Cloud,Spring Cloud Alibaba,Spring Cloud Tencent,Nacos,WebFlux,RSocket,GPRC,Minio"}],["script",{},"var _hmt = _hmt || [];\\n            (function() {\\n              var hm = document.createElement(\\"script\\");\\n              hm.src = \\"https://hm.baidu.com/hm.js?9d06530da5dbac9ce977a65ddf8e1cc0\\";\\n              var s = document.getElementsByTagName(\\"script\\")[0]; \\n              s.parentNode.insertBefore(hm, s);\\n            })();"]]},"headers":[{"level":2,"title":"一、基本使用","slug":"一、基本使用","link":"#一、基本使用","children":[]},{"level":2,"title":"二、选择使用","slug":"二、选择使用","link":"#二、选择使用","children":[{"level":3,"title":"1. dialect-sdk-aliyun","slug":"_1-dialect-sdk-aliyun","link":"#_1-dialect-sdk-aliyun","children":[]},{"level":3,"title":"2. dialect-sdk-s3","slug":"_2-dialect-sdk-s3","link":"#_2-dialect-sdk-s3","children":[]},{"level":3,"title":"3. dialect-sdk-minio","slug":"_3-dialect-sdk-minio","link":"#_3-dialect-sdk-minio","children":[]},{"level":3,"title":"4. rest-sdk-minio","slug":"_4-rest-sdk-minio","link":"#_4-rest-sdk-minio","children":[]},{"level":3,"title":"5. rest-sdk-specification","slug":"_5-rest-sdk-specification","link":"#_5-rest-sdk-specification","children":[]},{"level":3,"title":"6. oss-solution","slug":"_6-oss-solution","link":"#_6-oss-solution","children":[]},{"level":3,"title":"7. oss-spring-boot-starter","slug":"_7-oss-spring-boot-starter","link":"#_7-oss-spring-boot-starter","children":[]}]}],"git":{"createdTime":1738776787000,"updatedTime":1738776787000,"contributors":[{"name":"码匠君","username":"码匠君","email":"pointer_v@qq.com","commits":1,"url":"https://github.com/码匠君"}]},"readingTime":{"minutes":3.28,"words":985},"filePathRelative":"ecosphere/oss/how-to-use.md","localizedDate":"2025年2月5日","autoDesc":true}');export{k as comp,d as data};
