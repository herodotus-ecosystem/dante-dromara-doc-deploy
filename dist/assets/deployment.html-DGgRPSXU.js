import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as s,g as t,f as l,i,h as r,j as p,r as o,o as d}from"./app-BYiEkwdr.js";const h={};function c(k,e){const n=o("RouteLink");return d(),s("div",null,[e[2]||(e[2]=t(`<h2 id="编译代码" tabindex="-1"><a class="header-anchor" href="#编译代码"><span>编译代码</span></a></h2><h3 id="_1-编译工程代码" tabindex="-1"><a class="header-anchor" href="#_1-编译工程代码"><span>[1]编译工程代码</span></a></h3><p>升级依赖后、或工程发布前，最好重新编译下一组件库</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shared:build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>组件库代码编译成功之后，使用下面命令编译工程代码。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prod</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在编译工程代码之前，请首先检查和修改 <code>.env.prodution</code> 文件中的参数 <code>VITE_API_URL</code>， 该参数是后端服务的连接地址，如果该参数配置错误，打包成功之后将无法正确连接到后端服务。</p></div><h2 id="_2-部署至中间件" tabindex="-1"><a class="header-anchor" href="#_2-部署至中间件"><span>[2]部署至中间件</span></a></h2><p>编译成功之后的代码，存放在 <code>\${project_home}/packages/ui/container/context/dist</code> 目录下。全部是纯静态代码，包括：index.html、js、css、images，以及其它内容。</p><p>编译之后的代码，是无法直接运行的。需要放置在可以支持静态资源运行的中间件中，例如：<code>Nginx</code>、<code>Apache</code> 或 <code>Express</code> 等。</p><p>下文以 Nginx 为例，具体说明部署。</p><h3 id="_1-nginx-安装-windows" tabindex="-1"><a class="header-anchor" href="#_1-nginx-安装-windows"><span>[1]Nginx 安装（Windows）</span></a></h3><ol><li>下载 Windows 版本的 <code>Nginx</code>，<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener noreferrer">下载地址</a>。</li><li>将下载的 <code>nginx-1.XX.X.zip</code> 解压至你想要放置的目录即可。</li></ol><h3 id="_2-修改-nginx-配置" tabindex="-1"><a class="header-anchor" href="#_2-修改-nginx-配置"><span>[2]修改 Nginx 配置</span></a></h3><p>假设我们打算将编译好的工程代码放置在 <code>\${nginx_home}/html/ui</code> 目录下。</p><p>那么在 <code>\${nginx_home}/conf</code> 目录下，找到 <code>nginx.conf</code> 文件，将 root 地址指定为 <code>\${nginx_home}/html/ui</code>， 如下所示：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">http</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       mime.types</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  application/octet-stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    sendfile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    keepalive_timeout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  65</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       8899</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        server_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">html/ui</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            index</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  index.html</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index.htm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-拷贝代码" tabindex="-1"><a class="header-anchor" href="#_3-拷贝代码"><span>[3]拷贝代码</span></a></h3><p>将<code>\${project_home}/container/context/dist</code> 目录下的全部代码，拷贝至 <code>\${nginx_home}/html/ui</code> 目录下。</p><h3 id="_4-运行-nginx" tabindex="-1"><a class="header-anchor" href="#_4-运行-nginx"><span>[4]运行 Nginx</span></a></h3><p>打开命令提示符 (CMD) 或其它终端工具，进入 <code>\${nginx_home}</code> 目录，输入：<code>.\\nginx.exe</code> 即可运行 <code>Nginx</code></p><h3 id="_5-验证" tabindex="-1"><a class="header-anchor" href="#_5-验证"><span>[5]验证</span></a></h3><p>打开浏览器，输入地址 <a href="http://localhsot:8080" target="_blank" rel="noopener noreferrer">http://localhsot:8080</a>。如果页面可以正常显示，则说明部署完成。</p><div class="hint-container info"><p class="hint-container-title">说明</p><p>以上内容，特别是中间件的选择以及中间件的配置，仅是示例说明。请结合自身实际进行选择。</p></div><h3 id="_6-容器化部署" tabindex="-1"><a class="header-anchor" href="#_6-容器化部署"><span>[6]容器化部署</span></a></h3><p>Dante Cloud UI 已经完全适配 Docker 容器化部署。使用容器部署，完全可以忽略上面步骤。</p>`,26)),l("p",null,[e[1]||(e[1]=i("参见：")),r(n,{to:"/microservices/container-deployment.html"},{default:p(()=>e[0]||(e[0]=[i("容器化部署")])),_:1})])])}const u=a(h,[["render",c],["__file","deployment.html.vue"]]),y=JSON.parse('{"path":"/guide/frontend/deployment.html","title":"打包部署","lang":"zh-CN","frontmatter":{"icon":"caret-right","title":"打包部署","tag":["SAS","Spring Authorization Server","Dante Cloud","微服务","领域驱动","DDD","Spring Boot","Spring Cloud","Spring Security","Spring Cloud Alibaba","Spring Cloud Tencent","OAuth2.1","Nacos","Skywalking","Sentinel","Seata"],"description":"编译代码 [1]编译工程代码 升级依赖后、或工程发布前，最好重新编译下一组件库 组件库代码编译成功之后，使用下面命令编译工程代码。 注意 在编译工程代码之前，请首先检查和修改 .env.prodution 文件中的参数 VITE_API_URL， 该参数是后端服务的连接地址，如果该参数配置错误，打包成功之后将无法正确连接到后端服务。 [2]部署至中间件...","head":[["meta",{"property":"og:url","content":"https://dante-cloud.dromara.org/guide/frontend/deployment.html"}],["meta",{"property":"og:site_name","content":"“一套代码、两种架构”基于Apache2.0开源协议的企业级微服务"}],["meta",{"property":"og:title","content":"打包部署"}],["meta",{"property":"og:description","content":"编译代码 [1]编译工程代码 升级依赖后、或工程发布前，最好重新编译下一组件库 组件库代码编译成功之后，使用下面命令编译工程代码。 注意 在编译工程代码之前，请首先检查和修改 .env.prodution 文件中的参数 VITE_API_URL， 该参数是后端服务的连接地址，如果该参数配置错误，打包成功之后将无法正确连接到后端服务。 [2]部署至中间件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-21T09:34:36.000Z"}],["meta",{"property":"article:tag","content":"SAS"}],["meta",{"property":"article:tag","content":"Spring Authorization Server"}],["meta",{"property":"article:tag","content":"Dante Cloud"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"领域驱动"}],["meta",{"property":"article:tag","content":"DDD"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"Spring Cloud"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:tag","content":"Spring Cloud Alibaba"}],["meta",{"property":"article:tag","content":"Spring Cloud Tencent"}],["meta",{"property":"article:tag","content":"OAuth2.1"}],["meta",{"property":"article:tag","content":"Nacos"}],["meta",{"property":"article:tag","content":"Skywalking"}],["meta",{"property":"article:tag","content":"Sentinel"}],["meta",{"property":"article:tag","content":"Seata"}],["meta",{"property":"article:modified_time","content":"2025-03-21T09:34:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"打包部署\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-21T09:34:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"码匠君\\",\\"url\\":\\"https://gitee.com/dromara/dante-cloud\\"}]}"],["meta",{"name":"keywords","content":"SAS,Spring Authorization Server,Dante Cloud,微服务,DDD,Spring Boot,Spring Cloud,Spring Cloud Alibaba,Spring Cloud Tencent,Nacos,WebFlux,RSocket,GPRC,Minio"}],["script",{},"var _hmt = _hmt || [];\\n            (function() {\\n              var hm = document.createElement(\\"script\\");\\n              hm.src = \\"https://hm.baidu.com/hm.js?9d06530da5dbac9ce977a65ddf8e1cc0\\";\\n              var s = document.getElementsByTagName(\\"script\\")[0]; \\n              s.parentNode.insertBefore(hm, s);\\n            })();"]]},"git":{"createdTime":1742549676000,"updatedTime":1742549676000,"contributors":[{"name":"码匠君","username":"码匠君","email":"pointer_v@qq.com","commits":1,"url":"https://github.com/码匠君"}]},"readingTime":{"minutes":1.88,"words":563},"filePathRelative":"guide/frontend/deployment.md","localizedDate":"2025年3月21日","autoDesc":true}');export{u as comp,y as data};
