import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as e,b as r,e as n,d as o,w as i,r as s,o as d}from"./app-C3rcY3NQ.js";const m={};function h(u,t){const a=s("RouteLink");return d(),p("div",null,[t[16]||(t[16]=e("h2",{id:"后端运行",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#后端运行"},[e("span",null,"后端运行")])],-1)),t[17]||(t[17]=e("h3",{id:"_1-检出代码",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-检出代码"},[e("span",null,"[1]检出代码")])],-1)),e("p",null,[t[1]||(t[1]=n("具体操作与微服务版相同，参阅：")),o(a,{to:"/guide/get-start/deployment.html#_1-%E6%A3%80%E5%87%BA%E4%BB%A3%E7%A0%81%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B"},{default:i(()=>t[0]||(t[0]=[n("检出代码创建工程")])),_:1})]),t[18]||(t[18]=e("h3",{id:"_2-创建数据库",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-创建数据库"},[e("span",null,"[2]创建数据库")])],-1)),e("p",null,[t[3]||(t[3]=n("具体操作与微服务版相同，参阅：")),o(a,{to:"/guide/get-start/deployment.html#_2-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93"},{default:i(()=>t[2]||(t[2]=[n("创建数据库")])),_:1})]),t[19]||(t[19]=r('<h3 id="_3-修改配置" tabindex="-1"><a class="header-anchor" href="#_3-修改配置"><span>[3]修改配置</span></a></h3><p>根据自己的实际环境情况，修改 <code>application.yml</code> 中数据库以及 Redis 等相关配置。</p><h3 id="_4-编译代码" tabindex="-1"><a class="header-anchor" href="#_4-编译代码"><span>[4]编译代码</span></a></h3><p>上文已经提过，<strong>Dante Cloud Athena</strong> 并不是一个完整的开源项目，其核心代码<code>authentication-spring-boot-starter</code>，需要通过编译 <strong>Dante Cloud</strong> 生成（目前 <strong>Dante Cloud</strong> 核心包并没有提交至 Maven 中央仓库）。</p>',4)),e("p",null,[t[5]||(t[5]=n("因此，首先要检出 ")),t[6]||(t[6]=e("strong",null,"Dante Cloud",-1)),t[7]||(t[7]=n(" 工程，进行编译，保证编译后的包在本地仓库中存在。具体操作与微服务版相同，参阅：")),o(a,{to:"/guide/get-start/deployment.html#_6-%E7%BC%96%E8%AF%91%E4%BB%A3%E7%A0%81"},{default:i(()=>t[4]||(t[4]=[n("编译代码")])),_:1})]),t[20]||(t[20]=r('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>Dante Cloud 和 Dante Cloud Athena 的基础核心代码均依赖于 Dante Engine 工程中的包，这些包均已经提交至中央仓库。正常情况下，无须自己编译，只要能够联网即可正常下载。</p><p>如果您涉及 Dante Engine 的修改，那么几个工程的编译运行顺序如下：</p><ol><li>检出 Dante Engine 工程代码，进行编译，生成的 jar 包会保存至本地仓库中。</li><li>检出 Dante Cloud 工程代码，进行编译，生成的 jar 包会保存至本地仓库中。</li><li>最后检出 Dante Cloud Athena 工程代码，进行编译。</li></ol></div><h3 id="_5-数据库创建和数据初始化" tabindex="-1"><a class="header-anchor" href="#_5-数据库创建和数据初始化"><span>[5]数据库创建和数据初始化</span></a></h3><p>数据库创建脚本存放在： <code>${project_home}/dante-cloud-athena-application/src/main/resources/sqls</code> 目录下。</p>',3)),e("p",null,[t[10]||(t[10]=n("具体操作与微服务版相同，参阅：")),o(a,{to:"/guide/get-start/deployment.html#_7-%E8%BF%90%E8%A1%8C%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9D%97%E5%92%8C%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8"},{default:i(()=>t[8]||(t[8]=[n("数据库创建")])),_:1}),t[11]||(t[11]=n(" 和 ")),o(a,{to:"/guide/get-start/deployment.html#_8-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96"},{default:i(()=>t[9]||(t[9]=[n("数据初始化")])),_:1})]),t[21]||(t[21]=e("h3",{id:"_6-重置缓存",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-重置缓存"},[e("span",null,"[6]重置缓存")])],-1)),e("p",null,[t[13]||(t[13]=n("具体操作与微服务版相同，参阅：")),o(a,{to:"/guide/get-start/deployment.html#_9-%E9%87%8D%E7%BD%AE%E7%BC%93%E5%AD%98"},{default:i(()=>t[12]||(t[12]=[n("重置缓存")])),_:1})]),t[22]||(t[22]=r(`<h3 id="_7-运行验证" tabindex="-1"><a class="header-anchor" href="#_7-运行验证"><span>[7]运行验证</span></a></h3><p>以上步骤完成之后，工程后端整体搭建部署完成。可以通过运行前端界面进行操作或者用 <code>Postman</code> 调用接口的方式进行验证。</p><p>如果界面操作正常，或者接口调用正常，则说明工程已经正确部署。更多验证，参阅：<a href="https://www.herodotus.vip/guide/develop/grant.html" target="_blank" rel="noopener noreferrer">OAuth2 授权标准</a></p><h2 id="前端运行" tabindex="-1"><a class="header-anchor" href="#前端运行"><span>前端运行</span></a></h2><div class="hint-container info"><p class="hint-container-title">说明</p><p>Dante Cloud 和 Dante Cloud Athena 使用同一套前端工程。Dante Cloud UI 默认情况访问的是 Dante Cloud 系统提供的接口。想要将后端切换至 Dante Cloud Athena，需要修改前端工程 <code>.env.development</code> 或 <code>.env.production</code> 中的参数：<code>VITE_PROJECT</code></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 将其值修改为不为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dante</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的任意字符串，或者直接为空即可</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">VITE_PROJECT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div>`,5)),e("p",null,[t[15]||(t[15]=n("具体操作与微服务版相同，参阅：")),o(a,{to:"/guide/get-start/deployment.html#_4-%E8%BF%90%E8%A1%8C%E9%AA%8C%E8%AF%81"},{default:i(()=>t[14]||(t[14]=[n("环境部署")])),_:1})])])}const A=l(m,[["render",h]]),E=JSON.parse('{"path":"/ecosphere/athena/deployment.html","title":"环境部署","lang":"zh-CN","frontmatter":{"icon":"caret-right","title":"环境部署","tag":["SAS","Spring Authorization Server","Dante Cloud","微服务","领域驱动","DDD","Spring Boot","Spring Cloud","Spring Security","Spring Cloud Alibaba","Spring Cloud Tencent","OAuth2.1","Nacos","Skywalking","Sentinel","Seata"],"description":"后端运行 [1]检出代码 具体操作与微服务版相同，参阅： [2]创建数据库 具体操作与微服务版相同，参阅： [3]修改配置 根据自己的实际环境情况，修改 application.yml 中数据库以及 Redis 等相关配置。 [4]编译代码 上文已经提过，Dante Cloud Athena 并不是一个完整的开源项目，其核心代码authenticati...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"环境部署\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-14T08:25:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"码匠君\\",\\"url\\":\\"https://gitee.com/dromara/dante-cloud\\"}]}"],["meta",{"property":"og:url","content":"https://dante-cloud.dromara.org/ecosphere/athena/deployment.html"}],["meta",{"property":"og:site_name","content":"“一套代码、两种架构”基于Apache2.0开源协议的企业级微服务"}],["meta",{"property":"og:title","content":"环境部署"}],["meta",{"property":"og:description","content":"后端运行 [1]检出代码 具体操作与微服务版相同，参阅： [2]创建数据库 具体操作与微服务版相同，参阅： [3]修改配置 根据自己的实际环境情况，修改 application.yml 中数据库以及 Redis 等相关配置。 [4]编译代码 上文已经提过，Dante Cloud Athena 并不是一个完整的开源项目，其核心代码authenticati..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-14T08:25:00.000Z"}],["meta",{"property":"article:tag","content":"Seata"}],["meta",{"property":"article:tag","content":"Sentinel"}],["meta",{"property":"article:tag","content":"Skywalking"}],["meta",{"property":"article:tag","content":"Nacos"}],["meta",{"property":"article:tag","content":"OAuth2.1"}],["meta",{"property":"article:tag","content":"Spring Cloud Tencent"}],["meta",{"property":"article:tag","content":"Spring Cloud Alibaba"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:tag","content":"Spring Cloud"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"DDD"}],["meta",{"property":"article:tag","content":"领域驱动"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"Dante Cloud"}],["meta",{"property":"article:tag","content":"Spring Authorization Server"}],["meta",{"property":"article:tag","content":"SAS"}],["meta",{"property":"article:modified_time","content":"2025-04-14T08:25:00.000Z"}],["meta",{"name":"keywords","content":"SAS,Spring Authorization Server,Dante Cloud,微服务,DDD,Spring Boot,Spring Cloud,Spring Cloud Alibaba,Spring Cloud Tencent,Nacos,WebFlux,RSocket,GPRC,Minio"}],["script",{},"var _hmt = _hmt || [];\\n            (function() {\\n              var hm = document.createElement(\\"script\\");\\n              hm.src = \\"https://hm.baidu.com/hm.js?9d06530da5dbac9ce977a65ddf8e1cc0\\";\\n              var s = document.getElementsByTagName(\\"script\\")[0]; \\n              s.parentNode.insertBefore(hm, s);\\n            })();"]]},"git":{"createdTime":1744619100000,"updatedTime":1744619100000,"contributors":[{"name":"码匠君","username":"","email":"pointer_v@qq.com","commits":1}]},"readingTime":{"minutes":2.46,"words":737},"filePathRelative":"ecosphere/athena/deployment.md","autoDesc":true}');export{A as comp,E as data};
