import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,a as i,e as s,d as l,w as o,r as d,o as h}from"./app-BIlrT-2i.js";const c={};function k(p,e){const a=d("RouteLink");return h(),r("div",null,[e[4]||(e[4]=n(`<h2 id="后端本地容器部署" tabindex="-1"><a class="header-anchor" href="#后端本地容器部署"><span>后端本地容器部署</span></a></h2><p>本地采用容器方式进行项目的部署，因为每个人使用的电脑,操作系统都各不相同，加之不同人的喜好和偏好也不尽相同，无法做到全覆盖。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里仅以容器方式安装<code>Nacos</code>,<code>ELK</code>,<code>Kafka</code>,<code>Zookeeper</code>,<code>Sentinel</code>，本地安装<code>PostgreSQL</code>,<code>MySQL</code>和<code>Redis</code>的方式，进行示意性说明。仅供参考，具体安装请结合自身及时情况，适时调整。</p></div><h3 id="基础设施参考的安装方式如下" tabindex="-1"><a class="header-anchor" href="#基础设施参考的安装方式如下"><span>基础设施参考的安装方式如下</span></a></h3><ol><li>本地安装</li></ol><ul><li>PostgreSQL</li><li>MySQL</li><li>Redis</li></ul><blockquote><p>如果对容器比较数据，以上内容也可以以容器的方式安装</p></blockquote><ol start="2"><li>容器安装</li></ol><ul><li>Nacos</li><li>ELK</li><li>Kafka &amp; Zookeeper</li><li>Sentinel</li></ul><h3 id="_1-本地-docker-安装-windows-版" tabindex="-1"><a class="header-anchor" href="#_1-本地-docker-安装-windows-版"><span>[1]本地 Docker 安装（Windows 版）</span></a></h3><ul><li>Windows 本地安装 Docker 请参考个人博文：</li></ul><ol><li><a href="https://blog.csdn.net/Pointer_v/article/details/106176846?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">Windows 10 2004 (20H1) 安装 Docker Desktop for Windows (2.3.0.2) 以 WSL 2 方式运行容器</a></li><li><a href="https://blog.csdn.net/Pointer_v/article/details/106910766?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">Windows 10 将 Docker Desktop for Windows（WSL 2 方式）文件存储移出 C 盘放置到其它目录</a></li></ol><h3 id="_2-安装配置-mysql" tabindex="-1"><a class="header-anchor" href="#_2-安装配置-mysql"><span>[2]安装配置 MySQL</span></a></h3><ol><li><strong>正常安装 MySQL</strong></li><li><strong>创建 Nacos 持久化数据库</strong></li></ol><p>即在 MySQL 中，为 Nacos 新建用户,新建数据库,给数据库用户分配数据库权限。</p><ol start="3"><li><strong>导入 Nacos 初始脚本</strong></li></ol><p><a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener noreferrer">下载</a>最新稳定版的 Nacos 压缩包。解压后，在<code>{NACOS_HOME}/conf</code>目录下，找到<code>nacos-mysql.sql</code>导入到数据库中。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在工程的<code>\${project home}/configurations/scripts</code>目录下，保存了一份 Nacos 脚本可以使用，如果不是最新请自行重新下载。</p></div><ol start="4"><li><strong>开放 MySQL 数据库 IP 访问</strong></li></ol><p>正常情况下，本地开发使用<code>localhost</code>就可以访问已安装的 mysql 服务; 因为 Docker 是使用内部的独立网络，Docker 内部容器想要访问外部的数据库，只能通过 ip 地址才能访问。所以需要开放数据库的 IP 访问，否则会出现 Docker 容器发无法连接数据库的情况。</p><p>使用命令行工具，登录进入 MySQL，输入以下脚本查看数据库的可访问情况：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">select</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> host,user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql.user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询结果示例：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">             |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">---------</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">----------------</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">             |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mysql.infoschema</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mysql.session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mysql.sys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        |</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>host 字段的值是 localhost，说明只允许本地访问</p></blockquote><p>找到对应你所用的用户，设置允许任意 IP 访问，执行语句：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql.user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> where</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;root&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">flush</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> privileges</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-安装配置-postgresql" tabindex="-1"><a class="header-anchor" href="#_2-安装配置-postgresql"><span>[2]安装配置 PostgreSQL</span></a></h3><ol><li><strong>安装 PostgreSQL 数据库</strong></li></ol><p>正常安装即可。跟随安装的 Wizard 一步一步进行即可。</p><ol start="2"><li><strong>创建应用数据库</strong></li></ol>`,31)),i("p",null,[e[1]||(e[1]=s("参见：")),l(a,{to:"/guide/get-start/deployment.html#_2-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93"},{default:o(()=>e[0]||(e[0]=[s("创建应用数据")])),_:1})]),e[5]||(e[5]=i("ol",{start:"3"},[i("li",null,[i("strong",null,"导入建表数据")])],-1)),i("p",null,[e[3]||(e[3]=s("参见：")),l(a,{to:"/guide/get-start/deployment.html#_7-%E6%95%B0%E6%8D%AE%E5%88%9D%E5%A7%8B%E5%8C%96"},{default:o(()=>e[2]||(e[2]=[s("导入数据库脚本")])),_:1})]),e[6]||(e[6]=n('<ol start="4"><li><strong>开放 IP 访问</strong></li></ol><p>如果想要使用 Docker 封装的服务，就需要开放<code>PostgreSQL</code>的 IP 访问。Windows 环境，链接<code>PostgreSQL</code>是主机名填写<code>“localhost”</code>可以正常链接，使用 IP 地址不能进行链接</p><p>在<code>${PostgreSQL_HOME}/12/data</code>目录下，找到<code>postgresql.conf</code>和<code>pg_hba.conf</code>。</p><ul><li>打开<code>postgresql.conf</code>，在 59 行，找到<code>listen_addresses</code>，修改为：</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">listen_addresses</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;*&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>修改端口号打开<code>postgresql.conf</code>，在 63 行，找到 port</li></ul><blockquote><p>PostgreSQL 12 中，该项默认就为 ‘*’，所以可以不用修改</p></blockquote><ul><li>打开<code>pg_hba.conf</code>，在最后增加：</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             192.168.0.0/16</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          trust</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>允许访问 PostgreSQL 服务器的客户端 IP 地址, 其中：192.168.0.0/16 表示允许 192.168.0.1-192.168.255.255 网段访问。可根据实际情况调整</p></blockquote><ul><li>重启数据服务</li></ul><h3 id="_3-安装配置-redis" tabindex="-1"><a class="header-anchor" href="#_3-安装配置-redis"><span>[3]安装配置 Redis</span></a></h3><ol><li>安装 Redis</li></ol><p>正常安装即可</p><ol start="2"><li>开放 IP 访问</li></ol><p>在<code>redis</code>安装目录下，找到<code>redis.windows-service.conf</code></p><ul><li>将 <code>56</code> 行 <code>bind 127.0.0.1</code> 注释掉，修改为</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#bind 127.0.0.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>将 <code>75</code> 行 <code>protected-mode</code> 参数改为 <code>no</code></li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">protected-mode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>生产环境不建议这样，还是要指定具体 IP 安全一些</p></blockquote><ul><li>重启服务</li></ul><h3 id="_4-部署-kafka-zookeeper-nacos-elk-sentinel-dashboard" tabindex="-1"><a class="header-anchor" href="#_4-部署-kafka-zookeeper-nacos-elk-sentinel-dashboard"><span>[4]部署 Kafka,Zookeeper,Nacos,ELK,Sentinel Dashboard</span></a></h3><p>除了<code>MySQL</code>,<code>PostgreSQL</code>和<code>Redis</code>以外，其它相关运行环境组件 <code>Zookeeper</code>,<code>Kafka</code>,<code>Nacos</code>,<code>ELK</code>,<code>Sentinel Dashboard</code>，可以通过<code>docker-compose</code>方式进行部署，执行以下命令即可：</p><ul><li>运行容器</li></ul><div class="hint-container caution"><p class="hint-container-title">注意：</p><p><code>ELK</code> 依赖一个重要参数 <code>vm.max_map_count</code>，如果这个值小于<code>262144</code>，<code>ELK</code> 会无法正常启动</p><p>一种解决办法</p><p>如果是采用 <code>WSL2</code> 的方式运行容器，那么在 Linux 中输入以下命令</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sysctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vm.max_map_count=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">524288</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在启动 Docker Desktop</p><p>另一种解决办法：</p><ul><li>open powershell</li><li>wsl -d docker-desktop</li><li>echo &quot;vm.max_map_count = 262144&quot; &gt; /etc/sysctl.d/99-docker-desktop.conf</li></ul><p>参考 : <a href="https://github.com/docker/for-win/issues/5202" target="_blank" rel="noopener noreferrer">https://github.com/docker/for-win/issues/5202</a></p></div><div class="hint-container tip"><p class="hint-container-title">说明</p><p>已经将 Dockerfile 以及 docker-compose 修改为参数运行。</p><p>因此运行一下命令时，请确保.env 文件在执行命令的目录下。</p><p>例如：如果在<code>C:\\Users\\Administrator\\Desktop</code>执行命令，那么<code>.env</code>文件，就需要在<code>C:\\Users\\gengwei.zheng\\Desktop</code>目录下</p></div><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-compose -f ${project_home}/configurations/docker/docker-compose/linux/herodotus/env.base.yml up -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>该命令会查看本地是否已经有了相关镜像，如果没有会首先下载镜像，然后再运行，请先保证网络畅通</p></blockquote><ul><li>停止容器</li></ul><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-compose -f ${project_home}/configurations/docker/docker-compose/linux/herodotus/env.base.yml stop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>停止并删除容器</li></ul><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-compose -f ${project home}/configurations/docker/docker-compose/linux/herodotus/env.base.yml down</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_5-部署-skywalking" tabindex="-1"><a class="header-anchor" href="#_5-部署-skywalking"><span>[5]部署 Skywalking</span></a></h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>由于 <code>Skywalking</code> 采用 <code>Elasticsearch</code> 进行数据存储，因此 <code>Skywalking</code>运行之前，要保证 <code>Elasticsearch</code> 已经正常运行。</p><p>虽然 docker-compose 有 depends_on 属性，但是该属性只能解决容器启动的先后顺序问题，并不能实现某一个容器及容器内部所有应用启动成功之后再运行的问题。</p><p>因此，这里将环境依赖的应用，拆分为两个<code>docker-compose</code>文件，</p><ul><li>先运行<code>${project_home}/configurations/docker/docker-compose/linux/herodotus/env.base.yml</code>，待所有容器及内部服务成功运行之后，</li><li>再运行<code>${project_home}/configurations/docker/docker-compose/linux/herodotus/env.skywalking.yml</code></li></ul></div><p>通过 docker-compose 方式进行部署，执行以下命令即可：</p><ul><li>运行容器</li></ul><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-compose -f ${project_home}/configurations/docker/docker-compose/linux/herodotus/env.skywalking.yml  up -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>该命令会查看本地是否已经有了相关镜像，如果没有会首先下载镜像，然后再运行，请先保证网络畅通</p></blockquote><ul><li>停止容器</li></ul><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-compose -f ${project_home}/configurations/docker/docker-compose/linux/herodotus/env.skywalking.yml stop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>停止并删除容器</li></ul><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-compose -f ${project_home}/configurations/docker/docker-compose/linux/herodotus/env.skywalking.yml down</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_6-服务打包部署" tabindex="-1"><a class="header-anchor" href="#_6-服务打包部署"><span>[6]服务打包部署</span></a></h3><p>在命令行中，执行以下命令即可</p><ul><li>运行容器</li></ul><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-compose -f ${project home}/configurations/docker/docker-compose/linux/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/linux/herodotus/.env up -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>该命令会查看本地是否已经有了相关镜像，如果没有会首先构建镜像，然后再运行，请先保证网络畅通</p></blockquote><ul><li>停止容器</li></ul><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-compose -f ${project home}/configurations/docker/docker-compose/linux/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/linux/herodotus/.env up -d stop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>停止并删除容器</li></ul><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-compose -f ${project home}/configurations/docker/docker-compose/linux/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/linux/herodotus/.env up -d down</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="服务器容器部署" tabindex="-1"><a class="header-anchor" href="#服务器容器部署"><span>服务器容器部署</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>应用环境的部署是一项大工程，同样的基础设施根据不同应用场景需求，可以采用多种多样不同的方式进行部署。基础设施的部署也比较复杂，其中任意一项都可以单独作为专门话题进行讨论。这就是所谓的“<strong>千人千面</strong>”， 而且基础设施部署并不是本项目的重点，所以此处不再展开。当然，只要是技术问题，欢迎在群里积极讨论交流。</p></div><p>使用 Docker-compose 打包 Docker，参见<a href="#dante-cloud-docker-%E6%89%93%E5%8C%85%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">Dante Cloud Docker 打包使用方法</a></p><h2 id="docker-打包设计" tabindex="-1"><a class="header-anchor" href="#docker-打包设计"><span>Docker 打包设计</span></a></h2><h3 id="dante-cloud-docker-打包设计初衷" tabindex="-1"><a class="header-anchor" href="#dante-cloud-docker-打包设计初衷"><span>Dante Cloud Docker 打包设计初衷</span></a></h3><p>Dante Cloud Docker 打包的设计，采取了与大多数开源微服务框架不同的方式。采取这种不同的方式进行打包，主要是考虑解决以下两方面问题：</p><h4 id="_1-skwalking-agent-的引入问题" tabindex="-1"><a class="header-anchor" href="#_1-skwalking-agent-的引入问题"><span>[1]Skwalking Agent 的引入问题</span></a></h4><p>系统中为了解决服务链路跟踪及监控的问题，引入了 Skywalking 组件。Skywalking 想要正确运行，除了要保证 Skywalking Server 的<a href="#5%E9%83%A8%E7%BD%B2-skywalking">正常运行</a>外，还要将 Skywalking&quot;注入&quot;到服务的运行环境中。</p><ol><li>如果是以<code>fat jar</code>的方式运行服务，需要在服务的运行命令中指定 Skywalking Agent 以及相关的参数，如下命令</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -javaagent:/skywalking-agent.jar=agent.service_name=</span><span style="--shiki-light:#E45649;--shiki-dark:#D19A66;">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">SW_AGENT_SERVICE_NAME</span><span style="--shiki-light:#E45649;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">,collector.backend_service=</span><span style="--shiki-light:#E45649;--shiki-dark:#D19A66;">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">SW_COLLECTOR_BACKEND_SERVICE</span><span style="--shiki-light:#E45649;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> ${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">JAVA_OPTS</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /app.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>如果是以 Docker 的方式运行服务，传统的方式就需要把<code>skywalking-agent.jar</code>一并打入到服务的 docker 中。</li></ol><p>由于 Docker-compose 打包上下文的问题，就需要在每一个模块中都复制一份 skywalking-agent.jar。很不好管理，看着也不舒服。</p><h4 id="_2-dockerfile-的编写和放置问题" tabindex="-1"><a class="header-anchor" href="#_2-dockerfile-的编写和放置问题"><span>[2]Dockerfile 的编写和放置问题</span></a></h4><p>常规 Java 微服务的 Docker 打包方式，要么采用 Maven Plugin 的方式，要么采用 docker-compose 的方式。不管哪一种方式，都需要在该服务代码所在目录下新建一个 Dockerfile 文件。</p><p>一方面，每个服务下的 Dockerfile 文件中的配置信息，除了服务的 JAR 包名不同以外，其余的所有配置都相同，就是一种重复劳动。<br> 另一方面，如果要增加 Skywalking，那么需要在每一个服务所在目录下都拷贝一份<code>skywalking-agent.jar</code>。不仅重复工作，代码结构也不美观整洁。</p><h3 id="dante-cloud-docker-打包的设计" tabindex="-1"><a class="header-anchor" href="#dante-cloud-docker-打包的设计"><span>Dante Cloud Docker 打包的设计</span></a></h3><p>为了解决上述两方面问题，<code>Dante Cloud</code> 在所有模块之外之指定了一个统一的目录，将需要打包的 jar 以及 dockerfile 全部放入该目录，通过该目录形成一个统一的上下文环境。在<strong>Dante Cloud</strong>工程中，<code>${project_home}/configurations/docker/context</code>就是这个上下文环境。</p><p>在这个上下文环境中，除了包含通用的 Dockerfile,Skywalking Agent 以外，在使用 Maven 进行编译的过程中，还会将所有需要打包服务的对应的 jar 包拷贝到<code>${project_home}/configurations/docker/context/target</code>目录下。这样打包的所有资源就都已经具备，同时还解决了上述两个问题。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以通过修改<code>${project_home}/pom.xml</code> 中的<code>&lt;docker.build.directory&gt;</code>值，来改变拷贝 jar 包的目录</p></div><h3 id="dante-cloud-docker-打包使用方法" tabindex="-1"><a class="header-anchor" href="#dante-cloud-docker-打包使用方法"><span>Dante Cloud Docker 打包使用方法</span></a></h3><h4 id="_1-修改信息" tabindex="-1"><a class="header-anchor" href="#_1-修改信息"><span>[1]修改信息</span></a></h4><p>由于使用了一个统一的 Dockerfile 来解决重复定义 Docker 打包配置文件的问题，想要实现使用一个 Dockerfile 打出不同的 Docker，那么就需要通过传参的方式来改变 Dockerfile 中的值。</p><p>这里采用的是环境变量的方式，在<code>${project_home}/configurations/docker/docker-compose/.env</code>文件中定义这些参数。其中包含版本号以及具体服务对应的包名。所以如果有新增服务或者想要指定版本号，首先就需要修改这个配置文件。</p><h4 id="_2-执行命令" tabindex="-1"><a class="header-anchor" href="#_2-执行命令"><span>[2]执行命令</span></a></h4><p>执行打包命令</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-compose -f ${project home}/configurations/docker/docker-compose/linux/herodotus/services.dev.yml --env-file=${project_home}/configurations/docker/docker-compose/linux/herodotus/.env up -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-compose -f ${project home}/configurations/docker/docker-compose/linux/herodotus/services.prod.yml --env-file=${project_home}/configurations/docker/docker-compose/linux/herodotus/.env up -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">说明</p><p>上文说到想要以 Docker 的方式运行服务并且关联 Skywalking，就需要在打包时将 Skywalking Agent 打入到 Docker 中。但实际应用中并不是所有环境都需要使用 Skywalking，比如：在生产环境需要使用 Skywalking，在开发环境中并不需要 Skywalking 以降低资源消耗。</p><p>因此，Dante Cloud 提供了两种打包配置</p><p>使用<code>${project home}/configurations/docker/docker-compose/linux/herodotus/services.dev.yml</code>这个 Docker-compose 配置文件打包时，对应的 Dockerfile 文件是<code>${project home}/configurations/docker/context/development/Dockerfile</code>。这个 Dockerfile 配置中，没有包含 Skywalking Agent 的拷贝命令。</p><p>使用<code>${project home}/configurations/docker/docker-compose/linux/herodotus/services.prod.yml</code>这个 Docker-compose 配置文件打包时，对应的 Dockerfile 文件是<code>${project home}/configurations/docker/context/production/Dockerfile</code>。这个 Dockerfile 配置中，包含了 Skywalking Agent 的拷贝命令。</p><p>这样通过不同的命令，实现了对不同 Docker 环境需求的支持。</p></div><h2 id="前端容器部署" tabindex="-1"><a class="header-anchor" href="#前端容器部署"><span>前端容器部署</span></a></h2><h3 id="_1-修改后端网关地址" tabindex="-1"><a class="header-anchor" href="#_1-修改后端网关地址"><span>[1]修改后端网关地址</span></a></h3><p>在工程根目录下，找到 <code>.env.production</code> 配置文件。</p><p>修改配置参数 <code>VITE_API_URL</code> 的值为可以正确访问的后端服务网关地址。</p><h3 id="_2-编译前端代码" tabindex="-1"><a class="header-anchor" href="#_2-编译前端代码"><span>[2]编译前端代码</span></a></h3><p>使用下面命令，编译前端代码。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 编译前端工程代码</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prod</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-打包-docker-镜像" tabindex="-1"><a class="header-anchor" href="#_3-打包-docker-镜像"><span>[3]打包 Docker 镜像</span></a></h3><p>执行以下命令，将已经编译好的前端代码，打包成 <code>Docker</code> 镜像。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> ${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ui-project-home</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/container/herodotus/ui.yml</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-验证" tabindex="-1"><a class="header-anchor" href="#_4-验证"><span>[4]验证</span></a></h3><p>在浏览器中，访问地址 <code>http://ip:3000</code>。 前端页面正常打开，说明打包部署成功。</p>',93))])}const m=t(c,[["render",k]]),b=JSON.parse('{"path":"/microservices/container-deployment.html","title":"容器化部署","lang":"zh-CN","frontmatter":{"icon":"bars-staggered","title":"容器化部署","tag":["SAS","Spring Authorization Server","Dante Cloud","微服务","领域驱动","DDD","Spring Boot","Spring Cloud","Spring Security","Spring Cloud Alibaba","Spring Cloud Tencent","OAuth2.1","Nacos","Skywalking","Sentinel","Seata"],"description":"后端本地容器部署 本地采用容器方式进行项目的部署，因为每个人使用的电脑,操作系统都各不相同，加之不同人的喜好和偏好也不尽相同，无法做到全覆盖。 提示 这里仅以容器方式安装Nacos,ELK,Kafka,Zookeeper,Sentinel，本地安装PostgreSQL,MySQL和Redis的方式，进行示意性说明。仅供参考，具体安装请结合自身及时情况，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"容器化部署\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-28T03:01:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"码匠君\\",\\"url\\":\\"https://gitee.com/dromara/dante-cloud\\"}]}"],["meta",{"property":"og:url","content":"https://dante-cloud.dromara.org/microservices/container-deployment.html"}],["meta",{"property":"og:site_name","content":"“一套代码、两种架构”基于Apache2.0开源协议的企业级微服务"}],["meta",{"property":"og:title","content":"容器化部署"}],["meta",{"property":"og:description","content":"后端本地容器部署 本地采用容器方式进行项目的部署，因为每个人使用的电脑,操作系统都各不相同，加之不同人的喜好和偏好也不尽相同，无法做到全覆盖。 提示 这里仅以容器方式安装Nacos,ELK,Kafka,Zookeeper,Sentinel，本地安装PostgreSQL,MySQL和Redis的方式，进行示意性说明。仅供参考，具体安装请结合自身及时情况，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-28T03:01:05.000Z"}],["meta",{"property":"article:tag","content":"Seata"}],["meta",{"property":"article:tag","content":"Sentinel"}],["meta",{"property":"article:tag","content":"Skywalking"}],["meta",{"property":"article:tag","content":"Nacos"}],["meta",{"property":"article:tag","content":"OAuth2.1"}],["meta",{"property":"article:tag","content":"Spring Cloud Tencent"}],["meta",{"property":"article:tag","content":"Spring Cloud Alibaba"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:tag","content":"Spring Cloud"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"DDD"}],["meta",{"property":"article:tag","content":"领域驱动"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"Dante Cloud"}],["meta",{"property":"article:tag","content":"Spring Authorization Server"}],["meta",{"property":"article:tag","content":"SAS"}],["meta",{"property":"article:modified_time","content":"2025-04-28T03:01:05.000Z"}],["meta",{"name":"keywords","content":"SAS,Spring Authorization Server,Dante Cloud,微服务,DDD,Spring Boot,Spring Cloud,Spring Cloud Alibaba,Spring Cloud Tencent,Nacos,WebFlux,RSocket,GPRC,Minio"}],["script",{},"var _hmt = _hmt || [];\\n            (function() {\\n              var hm = document.createElement(\\"script\\");\\n              hm.src = \\"https://hm.baidu.com/hm.js?9d06530da5dbac9ce977a65ddf8e1cc0\\";\\n              var s = document.getElementsByTagName(\\"script\\")[0]; \\n              s.parentNode.insertBefore(hm, s);\\n            })();"]]},"git":{"createdTime":1745809265000,"updatedTime":1745809265000,"contributors":[{"name":"码匠君","username":"","email":"pointer_v@qq.com","commits":1}]},"readingTime":{"minutes":10.02,"words":3005},"filePathRelative":"microservices/container-deployment.md","autoDesc":true}');export{m as comp,b as data};
