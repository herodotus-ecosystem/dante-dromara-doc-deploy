import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as d,o as i}from"./app-BMSUhgqF.js";const n={};function o(c,t){return i(),r("div",null,t[0]||(t[0]=[d('<h2 id="对比-compare" tabindex="-1"><a class="header-anchor" href="#对比-compare"><span>对比 | Compare</span></a></h2><h3 id="一、不只是简单的-spring-boot-starter-构建" tabindex="-1"><a class="header-anchor" href="#一、不只是简单的-spring-boot-starter-构建"><span>一、不只是简单的 Spring Boot Starter 构建</span></a></h3><ol><li>构建统一的错误，可以返回更人性化、更易理解的错误信息，同时兼顾更详细错误信息的返回，方便开发人员理解和定位问题。</li><li>采用更易理解和使用的格式对 Minio Java SDK 参数进行重新定义。规避 Minio 默认 XML 方式参数多、不易理解使用、与前端交互不方便等问题。</li><li>隐藏 Minio Java SDK 不易理解和使用的细节，提供详实的注释说明，开发人员在使用时无需再通过翻阅 Minio 在线文档和源代码来了解各个 API 使用细节。</li><li>提供统一标准的 REST API，以及 OpenAPI Swagger3 文档描述和准确的 Spring Validation 校验，可直接集成至系统中使用。</li><li>Minio Client 对象池、自定义极简 Minio Server 访问反向代理，提升</li><li>逐步丰富不同厂商 OSS 操作，作为不同 OSS 实现。</li><li>抽象统一 REST API，实现统一接口操作不同厂商 OSS。</li></ol><h3 id="二、标准化业务逻辑和解决方案集合" tabindex="-1"><a class="header-anchor" href="#二、标准化业务逻辑和解决方案集合"><span>二、标准化业务逻辑和解决方案集合</span></a></h3><ol><li>不只是上传、下载等常用方法的封装，涵盖 Minio Java SDK 支持的所有方法和操作。</li><li>选择业内最优的解决方案，实现和集成大文件分片上传、秒传、直传、断点续传等主要业务需求功能。</li><li>结合自身应用经验和需求，将 Minio API 进一步组合成符合实际应用的业务逻辑和功能处理。</li><li>采用一个基于 Vue3、Typescript5、Vite4、Pinia 2 的完整的前端项目作为集成示例，包括详细的 Typescript 类型定义以及 vue-simple-uploader 等主流组件集成和使用方法。</li><li>提供基于 Spring Authorization Server 的单体版、微服务版案例，从 SDK、Spring Boot Starter 到完整项目任你选择。</li></ol><h3 id="三、具体差异说明" tabindex="-1"><a class="header-anchor" href="#三、具体差异说明"><span>三、具体差异说明</span></a></h3><ul><li>[1] 基础 API 方法以及方法参数</li></ul><table><thead><tr><th>Minio SDK</th><th>Dante OSS</th></tr></thead><tbody><tr><td>仅包含基础操作 API</td><td>提供大量重载方法</td></tr><tr><td>必须用构造器创建参数对象</td><td>重载方法覆盖所有常见参数，按需传参即可</td></tr><tr><td>API 全部混在同一个类中</td><td>根据差异、用途、场景拆分为不同的 Service，例如：getObject 和 downloadObject</td></tr><tr><td>源于 XML 对象参数结构复杂</td><td>自定义实体和转换器简化参数结构</td></tr><tr><td>基础 API 会抛出大量 Exception，具体问题需要自己摸索对应</td><td>对所有错误进行标准化处理，提供更准确和交互友好的描述信息，可方便地与系统错误体系融合</td></tr></tbody></table><ul><li>[2] 前后端交互</li></ul><table><thead><tr><th>Minio SDK</th><th>Dante OSS</th></tr></thead><tbody><tr><td>复杂结构参数不利于 JSON 互转</td><td>采用最简化参数方便传输并可准确转换成对应 Minio 复杂对象参数</td></tr><tr><td>参数层次结构复杂</td><td>自定义请求参数实体保持继承结构的同时简化传递参数</td></tr><tr><td>参数多用途不明晰必须查阅源代码</td><td>使用 OpenAPI 注解详细说明各参数用途可使用 Swagger 查阅</td></tr><tr><td>参数校验规则细节多没有文档说明</td><td>对照 Minio 源代码，结合自定义实体，增加匹配的 Spring Validation 校验</td></tr><tr><td>不提供 REST API</td><td>提供标准的 REST API 可直接使用</td></tr></tbody></table><ul><li>[3] 业务支持</li></ul><table><thead><tr><th>内容</th><th>Minio SDK</th><th>Dante OSS</th></tr></thead><tbody><tr><td>常规业务</td><td>独立方法需要自己按需组合</td><td>封装常规业务逻辑，可直接调用 REST API 使用</td></tr><tr><td>设置管理</td><td>对于存储桶、对象的管理只能通过 Minio 服务器管理界面</td><td>对照 Minio 管理界面方式，将管理功能封装为 Service、REST API 以及 Vue 管理界面</td></tr><tr><td>文件直传</td><td>提供直传机制，直接暴露 Minio 服务器地址</td><td>增加超简化反向代理，在满足直传需求的前提下，很好的隐藏 Minio 服务器以提升安全性</td></tr><tr><td>文件直传</td><td>直传接口无法与现有系统安全体系融合（无法鉴权）</td><td>提供基于 Spring Authorization Server 的、完整的单体版和微服务版案例</td></tr><tr><td>接口防护</td><td>不提供 REST API 及 接口防护</td><td>根据 REST 接口类型，默认设置幂等、防刷等接口调用防刷机制</td></tr><tr><td>对象池化</td><td>Builder 模式创建基础 Client</td><td>构建 Minio Client 和 Minio Admin 对象池模式，支持重用 Minio 基础对象来提高应用程序性能和效率</td></tr><tr><td>大文件分片</td><td>内部机制无法直接使用</td><td>封装主流大文件分片方案，提供前后端使用案例</td></tr></tbody></table><ul><li>[4] 前端开发</li></ul><table><thead><tr><th>Dante OSS</th></tr></thead><tbody><tr><td>只要 Minio API 支持，对应的管理功能均会在标准的 Vue3 工程中实现</td></tr><tr><td>提供与后端一致 Typescript 声明文件，可以直接用于基于 Typescript 的前端开发</td></tr><tr><td>完整的、基于 Vue3、Vite4、Typescript5 的前端项目案例，可清晰的了解 Minio 前后端交互和使用，甚至直接使用</td></tr></tbody></table><h2 id="功能-function" tabindex="-1"><a class="header-anchor" href="#功能-function"><span>功能 | function</span></a></h2><ul><li>[1] 基础功能</li></ul><table><thead><tr><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>Bucket 列表</td><td>Bucket 列表查询，包括 Service、REST API 和前端展示</td></tr><tr><td>Bucket 名称是否存在</td><td>Bucket 名是否存在，包括 Service、REST API 和前端异步校验处理</td></tr><tr><td>Bucket 创建</td><td>创建 Bucket，包括 Service、REST API 和前端 Validation 校验处理</td></tr><tr><td>Bucket 删除</td><td>删除 Bucket，包括 Service、REST API 和前端展示处理</td></tr><tr><td>Bucket 加密设置获取</td><td>获取 Bucket Encryption 设置，包括 Service、REST API</td></tr><tr><td>Bucket 修改加密设置</td><td>修改 Bucket Encryption 设置，包括 Service、REST API</td></tr><tr><td>Bucket 删除加密设置</td><td>删除 Bucket Encryption 设置，包括 Service、REST API</td></tr><tr><td>Bucket 访问策略设置获取</td><td>获取 Bucket Policy 设置，包括 Service、REST API</td></tr><tr><td>Bucket 修改访问策略设置</td><td>修改 Bucket Policy 设置，包括 Service、REST API</td></tr><tr><td>Bucket 删除访问策略设置</td><td>删除 Bucket Policy 设置，包括 Service、REST API</td></tr><tr><td>Bucket 标签获取</td><td>获取 Bucket Tags，包括 Service、REST API</td></tr><tr><td>Bucket 修改标签</td><td>修改 Bucket Tags，包括 Service、REST API</td></tr><tr><td>Bucket 删除标签</td><td>删除 Bucket Tags，包括 Service、REST API</td></tr><tr><td>Bucket 对象锁定设置获取</td><td>获取 Bucket ObjectLockConfiguration 设置，包括 Service、REST API</td></tr><tr><td>Bucket 修改对象锁定设置</td><td>修改 Bucket ObjectLockConfiguration 设置，包括 Service、REST API</td></tr><tr><td>Bucket 删除对象锁定设置</td><td>删除 Bucket ObjectLockConfiguration 设置，包括 Service、REST API</td></tr><tr><td>Object 列表</td><td>Object 列表查询，包括 Service、REST API 和前端展示</td></tr><tr><td>Object 删除</td><td>删除 Object，包括 Service、REST API 和前端展示处理</td></tr><tr><td>Object 批量删除</td><td>批量删除 Object，包括 Service、REST API 和前端展示处理</td></tr><tr><td>Object 元信息获取</td><td>获取 Object Stat，包括 Service、</td></tr><tr><td>Object 下载(服务端)</td><td>Object 下载(服务端下载，非流模式)，包括 Service、</td></tr><tr><td>Object 标签获取</td><td>获取 Object Tags，包括 Service、REST API</td></tr><tr><td>Object 修改标签</td><td>修改 Object Tags，包括 Service、REST API</td></tr><tr><td>Object 删除标签</td><td>删除 Object Tags，包括 Service、REST API</td></tr><tr><td>Object 获取保留设置</td><td>获取 Object Retention，包括 Service、REST API</td></tr><tr><td>Object 修改保留设置</td><td>修改 Object Retention，包括 Service、REST API</td></tr><tr><td>Object 开启持有设置</td><td>获取 Object LegalHold，包括 Service、REST API</td></tr><tr><td>Object 关闭持有设置</td><td>修改 Object LegalHold，包括 Service、REST API</td></tr><tr><td>Admin User 列表</td><td>User 列表查询，包括 Service、REST API</td></tr><tr><td>Admin User 信息</td><td>获取 User 信息，包括 Service、REST API</td></tr><tr><td>Admin User 创建</td><td>创建 User，包括 Service、REST API</td></tr><tr><td>Admin User 删除</td><td>删除 User，包括 Service、REST API</td></tr><tr><td>Admin Group 列表</td><td>Group 列表查询，包括 Service、REST API</td></tr><tr><td>Admin Group 信息</td><td>获取 Group 信息，包括 Service、REST API</td></tr><tr><td>Admin Group 创建</td><td>创建 Group，包括 Service、REST API</td></tr><tr><td>Admin Group 删除</td><td>删除 Group，包括 Service、REST API</td></tr><tr><td>Admin Policy 列表</td><td>Policy 列表查询，包括 Service、REST API</td></tr><tr><td>Admin Policy 创建</td><td>创建 Policy，包括 Service、REST API</td></tr><tr><td>Admin Policy 删除</td><td>删除 Policy，包括 Service、REST API</td></tr><tr><td>Admin Bucket 配额设置</td><td>存储桶配额设置，包括 Service</td></tr><tr><td>Admin Bucket 配额获取</td><td>存储桶配额获取，包括 Service</td></tr><tr><td>Admin Bucket 配额清除</td><td>存储桶配额清除，包括 Service</td></tr><tr><td>其它功能</td><td>正逐步完善，主要涉及前后端交互、以及可用性验证和前端相关功能的开发，敬请期待，欢迎 PR</td></tr></tbody></table><ul><li>[2] 扩展功能</li></ul><table><thead><tr><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>创建分片上传请求</td><td>创建分片上传请求，返回 Minio UploadId</td></tr><tr><td>创建文件预上传地址</td><td>根据 UploadId 和 指定的分片数量，返回数量像匹配的 Minio 与上传地址</td></tr><tr><td>获取所有分片文件</td><td>获取指定 uploadId 下所有的分片文件</td></tr><tr><td>创建大文件分片上传</td><td>统一的创建大文件分片上传业务逻辑封装，减少前后端反复交互， 包括 Service、REST API</td></tr><tr><td>合并已经上传完成的分片</td><td>根据 UploadId 合并已经上传完成的分片，完成大文件分片上传 包括 Service、REST API</td></tr><tr><td>统一常量接口</td><td>将涉及的 Enums、常量以统一接口的方式返回给前端，方便展示使用， 包括 Service、REST API 和前端展示</td></tr><tr><td>Minio Client 对象池</td><td>实现 Minio Client 对象池，减少 Minio Client 的反复创建和销毁，提升访问 Minio Server 性能</td></tr><tr><td>Minio Async Client 对象池</td><td>实现 Minio Async Client 对象池，减少 Minio Async Client 的反复创建和销毁，提升访问 Minio Server 性能</td></tr><tr><td>Minio Admin 对象池</td><td>实现 Minio Admin 对象池，减少 Minio Admin 的反复创建和销毁，提升访问 Minio Server 性能</td></tr><tr><td>Bucket 设置</td><td>统一 Bucket 设置： Bucket 标签设置、访问策略、加密方式、对象锁定、版本控制、保留设置等， 包括 Service、REST API 和前端展示</td></tr><tr><td>Object 设置</td><td>统一 Object 设置： Bucket 标签设置， 包括 Service、REST API 和前端展示</td></tr><tr><td>Object 下载(流模式)</td><td>Minio 对象下载，采用流模式支持 vue 前端 post 方式下载， 包括 Service、REST API 和前端展示</td></tr><tr><td>超轻量级反向代理</td><td>实现轻量级反向代理解决 PresignedObjectUrl 方式直接向前端暴露 Minio Server 地址问题</td></tr></tbody></table><ul><li>[3] 主流方案</li></ul><table><thead><tr><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>OpenAPI 支持</td><td>在支持 Open API 环境下，显示 Swagger 文档，建议使用 Springdoc</td></tr><tr><td>与 Spring Authorization Server 体系集成</td><td>提供完整的与 Spring Authorization Server 集成，实现认证、授权、鉴权、动态权限等完整案例，包括单体版和微服务版</td></tr><tr><td>大文件分片上传</td><td>采用 PresignedObjectUrl 方案的大文件分片上传。扩展 Minio Client，封装相应的 Service、REST API</td></tr><tr><td>vue-simple-uploader</td><td>前端基于 vue-simple-uploader 组件，配合自定义 REST API 实现大文件分片上传</td></tr></tbody></table>',21)]))}const l=e(n,[["render",o]]),p=JSON.parse('{"path":"/ecosphere/oss/functions.html","title":"功能说明","lang":"zh-CN","frontmatter":{"icon":"caret-right","title":"功能说明","tag":["SAS","Spring Authorization Server","Dante Cloud","微服务","领域驱动","DDD","Spring Boot","Spring Cloud","Spring Security","Spring Cloud Alibaba","Spring Cloud Tencent","OAuth2.1","Nacos","Skywalking","Sentinel","Seata"],"description":"对比 | Compare 一、不只是简单的 Spring Boot Starter 构建 构建统一的错误，可以返回更人性化、更易理解的错误信息，同时兼顾更详细错误信息的返回，方便开发人员理解和定位问题。 采用更易理解和使用的格式对 Minio Java SDK 参数进行重新定义。规避 Minio 默认 XML 方式参数多、不易理解使用、与前端交互不方便...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"功能说明\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-06T15:06:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"码匠君\\",\\"url\\":\\"https://gitee.com/dromara/dante-cloud\\"}]}"],["meta",{"property":"og:url","content":"https://dante-cloud.dromara.org/ecosphere/oss/functions.html"}],["meta",{"property":"og:site_name","content":"“一套代码、两种架构”基于Apache2.0开源协议的企业级微服务"}],["meta",{"property":"og:title","content":"功能说明"}],["meta",{"property":"og:description","content":"对比 | Compare 一、不只是简单的 Spring Boot Starter 构建 构建统一的错误，可以返回更人性化、更易理解的错误信息，同时兼顾更详细错误信息的返回，方便开发人员理解和定位问题。 采用更易理解和使用的格式对 Minio Java SDK 参数进行重新定义。规避 Minio 默认 XML 方式参数多、不易理解使用、与前端交互不方便..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-06T15:06:14.000Z"}],["meta",{"property":"article:tag","content":"Seata"}],["meta",{"property":"article:tag","content":"Sentinel"}],["meta",{"property":"article:tag","content":"Skywalking"}],["meta",{"property":"article:tag","content":"Nacos"}],["meta",{"property":"article:tag","content":"OAuth2.1"}],["meta",{"property":"article:tag","content":"Spring Cloud Tencent"}],["meta",{"property":"article:tag","content":"Spring Cloud Alibaba"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:tag","content":"Spring Cloud"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"DDD"}],["meta",{"property":"article:tag","content":"领域驱动"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"Dante Cloud"}],["meta",{"property":"article:tag","content":"Spring Authorization Server"}],["meta",{"property":"article:tag","content":"SAS"}],["meta",{"property":"article:modified_time","content":"2025-05-06T15:06:14.000Z"}],["meta",{"name":"keywords","content":"SAS,Spring Authorization Server,Dante Cloud,微服务,DDD,Spring Boot,Spring Cloud,Spring Cloud Alibaba,Spring Cloud Tencent,Nacos,WebFlux,RSocket,GPRC,Minio"}],["script",{},"var _hmt = _hmt || [];\\n            (function() {\\n              var hm = document.createElement(\\"script\\");\\n              hm.src = \\"https://hm.baidu.com/hm.js?9d06530da5dbac9ce977a65ddf8e1cc0\\";\\n              var s = document.getElementsByTagName(\\"script\\")[0]; \\n              s.parentNode.insertBefore(hm, s);\\n            })();"]]},"git":{"createdTime":1746543974000,"updatedTime":1746543974000,"contributors":[{"name":"码匠君","username":"","email":"pointer_v@qq.com","commits":1}]},"readingTime":{"minutes":8.7,"words":2610},"filePathRelative":"ecosphere/oss/functions.md","autoDesc":true}');export{l as comp,p as data};
