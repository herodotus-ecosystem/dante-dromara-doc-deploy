import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as r,g as n,f as s,i as a,h as e,j as l,r as d,o as h}from"./app-BYiEkwdr.js";const o="/assets/image/nacos/config-create.png",k="/assets/image/nacos/config-import.png",c="/assets/image/idea/lifecycle.png",g="/assets/image/idea/local-skywalking.jpeg",A={},y={class:"hint-container tip"},u={class:"hint-container tip"},m={class:"hint-container info"},v={class:"hint-container warning"};function b(F,i){const t=d("RouteLink");return h(),r("div",null,[i[22]||(i[22]=n(`<div class="hint-container info"><p class="hint-container-title">声明</p><p>部署是了解本项目和微服务的第一步，建议第一次部署一定严格按照文档描述进行操作，保证系统可以正常运行之后，并且对现有内容有了一定认识之后，在按照自己的进行修改或变更。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果急于部署只是为了看看界面长个什么样子，尝个鲜。建议直接部署单体版，搭个数据库和 Nodejs 环境即可，省时省力快捷。</p></div><h2 id="一-准备工作" tabindex="-1"><a class="header-anchor" href="#一-准备工作"><span>[一]准备工作</span></a></h2><h3 id="后端运行所需的基础设施" tabindex="-1"><a class="header-anchor" href="#后端运行所需的基础设施"><span>后端运行所需的基础设施</span></a></h3><ul><li><strong>(1) 后端本地运行所需标准最小环境</strong></li></ul><table><thead><tr><th>序号</th><th>设施</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>Nacos</td><td>分布式版本使用的 Nacos 作为配置中心和服务发现中心，所以需要安装 Nacos。不管本地运行还是 Docker，K8S 环境都需要。</td></tr><tr><td>2</td><td>Redis</td><td>运行的必须组件，分布式版本，单体版本；本地运行还是还是 Docker，K8S 环境都需。</td></tr><tr><td>3</td><td>Kafka</td><td>运行的必须组件，分布式版本，单体版本；本地运行还是还是 Docker，K8S 环境都需要。（虽然本系统使用的是 spring cloud bus 同时兼容 RabbitMQ 和 Kafka，由于使用 Debezium 来支持工作流，ElasticSearch 数据同步，所以如果没有特殊的使用需求还是建议使用 Kafka）。</td></tr><tr><td>4</td><td>PostgreSQL 数据库</td><td>建议使用最新版，其它版本也可以运行个人多年项目经验，感觉 PostgreSQL 更好用和顺手，所以默认数据为 PostgreSQL。基础代码都是使用 spring data jpa（Mybatis Plus 也支持），所以其它数据库也支持，修改一下配置就行。</td></tr><tr><td>5</td><td>MySQL 数据库</td><td>Nacos 运行需要依赖数据库，长久运行需要依赖于 MySQL（目前 Nacos 不支持其它数据库，虽说 Nacos RoadMap 有多数据库支持，不知道什么时候开发完成）。本地运行为了省事，也可以用 Nacos 的内置数据库，这样减少本地运行资源占用。</td></tr></tbody></table><blockquote><p>以上内容是保证微服务运行起来的最小环境需求，当然还有其它的 ELK、Skywalking、Sentinel Dashboard、Minio 等，这些都是辅助措施，并不会直接影响系统运行，可在系统运行成功之后，再行部署。</p></blockquote><ul><li><strong>(2) 后端代码开发环境</strong></li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">IDE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IDEA</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Eclipse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (推荐使用IDEA)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">JDK</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dante</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cloud</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 2.7.X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (JDK </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1.8+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)， Dante Cloud 3.0.X (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">JDK</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 17+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)。(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">推荐使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Liberica</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JDK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 推荐使用最新版</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Git</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Maven</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 推荐使用最新版</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Maven</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>(3) 后端环境系统配置</strong></li></ul><p>参见：<a href="https://www.herodotus.vip/get-started/prepare/environment.html" target="_blank" rel="noopener noreferrer">本地开发环境搭建</a></p><h3 id="前端运行所需的基础设施" tabindex="-1"><a class="header-anchor" href="#前端运行所需的基础设施"><span>前端运行所需的基础设施</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Dante Cloud 自基于 Vue3 + Vite4 + Typescript5 + Monorepo 新版前端推出之后，已经不再使用 yarn 作为前端包管理工具，转而使用 Pnpm 作为默认的包管理</p></div><ul><li><strong>(1) 前端端本地运行所需标准最小环境</strong></li></ul><table><thead><tr><th>设施</th><th>当前版本</th><th>说明</th></tr></thead><tbody><tr><td>Nodejs</td><td>&gt;=12.0.0</td><td>运行前端 Vue 工程必须依赖，如果不需要运行前端可以忽略，</td></tr><tr><td>Pnpm</td><td>latest</td><td>前端包管理工具，Npm、PNPM 或其它工具也都可以， 推荐使用 Yarn</td></tr></tbody></table><ul><li><strong>(2) 前端代码开发开发环境</strong></li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Visual</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Studio</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Code</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> （Vscode）或其它</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> （推荐Vscode）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>(3) 前端环境系统配置</strong></li></ul><p>参见：<a href="https://www.herodotus.vip/get-started/prepare/environment.html" target="_blank" rel="noopener noreferrer">本地开发环境搭建</a></p><h2 id="二-后端运行" tabindex="-1"><a class="header-anchor" href="#二-后端运行"><span>[二]后端运行</span></a></h2><div class="hint-container caution"><p class="hint-container-title">警告</p><p>开展以下各项工作以前，请确保 Git，数据库，Redis，Nacos，Kafka，ELK 套件已经正确安装和运行。</p><p>确保相关基础设施组件正确安装和运行的含义：不仅是指相关组件已经可以运行，还包括可以正常连接、访问或操作。</p><p>例如：Kafka，在软件安装完成之后，可以结合自己的部署方式和部署架构，找一个自己熟悉的可视化工具进行连接测试。连接测试成功之后，再进行后续操作。</p><blockquote><p>微服务架构与单体架构最大的不同点之一：就是涉及的基础设施较多，任何一个点出问题都会导致系统运行异常。连通性测试未通过之前，不要急于测试和使用系统。很多朋友就是急于部署，折腾一圈下来发现系统运行不正常，又花费大量的时间和精力排查代码、交流群里面咨询、发 ISSUE，后来发现是某项基础设施组件单独用工具访问都联不通。</p></blockquote></div>`,21)),s("div",y,[i[3]||(i[3]=s("p",{class:"hint-container-title"},"提示",-1)),s("p",null,[i[1]||(i[1]=a("如果觉得安装 Nacos，Kafka，ELK 比较麻烦，建议使用容器进行安装，参见章节：")),e(t,{to:"/microservices/container-deployment.html"},{default:l(()=>i[0]||(i[0]=[a("容器化部署")])),_:1}),i[2]||(i[2]=a("。数据库和 Redis 还是建议本地安装。"))])]),i[23]||(i[23]=n(`<h3 id="_1-检出代码创建工程" tabindex="-1"><a class="header-anchor" href="#_1-检出代码创建工程"><span>[1]检出代码创建工程</span></a></h3><p><code>IDEA</code> 菜单 <code>File -&gt; New -&gt; Project From Version Control...</code>， 在弹出框中输入本工程 Git 地址：<a href="https://gitee.com/dromara/dante-cloud.git" target="_blank" rel="noopener noreferrer">https://gitee.com/dromara/dante-cloud.git</a>，然后设置放置目录，点击 <strong>OK</strong> 即可</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不建议直接从 Gitee 或 Github 上，以 <em>下载 ZIP</em> 的方式获取代码。因为代码中集成了 git 信息打包工具，依赖于工程中的 <code>.git</code> 目录，用于查看 git 版本信息，相关信息也可在 <code>Spring Boot Admin</code> 中查看。直接以 ZIP 方式下载代码，可能会因找不到 <code>.git</code> 目录而导致编译出错。</p></div><h3 id="_2-创建数据库" tabindex="-1"><a class="header-anchor" href="#_2-创建数据库"><span>[2]创建数据库</span></a></h3><p>进入<code>PostgreSQL</code> 的<code>SQL Shell(psql)</code> (在 Windows 的菜单中可以找到)，使用超级管理员账号和密码登录进入数据库，执行以下脚本：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 以下要分步，一条一条地执行，不要全部复制，一把全部执行。一定要注意每个语句结尾要以“</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">”结束。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CREATE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> USER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> herodotus</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> WITH</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PASSWORD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;herodotus&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CREATE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DATABASE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> herodotus</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> OWNER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> herodotus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GRANT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ALL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PRIVILEGES</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ON</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DATABASE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> herodotus</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> herodotus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">说明</p><ul><li>这里不管是用户名，用户密码还是数据库名均使用 herodotus 是为了方便，请根据自己实际情况修改。</li><li>这里没有进行分库（即：所有的服务使用同一个数据库），如不满足需求，请在整体部署完成并且可以正常运行后，再结合自己的实际情况修改。</li><li>以上是均是以 <code>PostgreSQL</code> 作为默认数据库进行说明。</li><li><code>Linux</code> 环境下在命令行中，以管理员账号登录 <code>PostgreSQL</code>数据库</li></ul></div>`,7)),s("div",u,[i[8]||(i[8]=s("p",{class:"hint-container-title"},"提示",-1)),s("p",null,[i[5]||(i[5]=a("系统默认使用 ")),i[6]||(i[6]=s("code",null,"PostgreSQL",-1)),i[7]||(i[7]=a(" 数据库，如果想要使用其它数据库，建议详细全面阅读本章节，对整体部署过程有了详细了解之后，再来了解如何切换数据库。参阅：")),e(t,{to:"/guide/backend/change-database.html"},{default:l(()=>i[4]||(i[4]=[a("更换数据库")])),_:1})])]),i[24]||(i[24]=n('<h3 id="_3-创建或导入-nacos-配置" tabindex="-1"><a class="header-anchor" href="#_3-创建或导入-nacos-配置"><span>[3]创建或导入 Nacos 配置</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在进行以下操作之前，建议对 Nacos 中 Namespace，Group 等基础概念和具体操作先行做一定的了解。<a href="https://nacos.io/zh-cn/docs/concepts.html" target="_blank" rel="noopener noreferrer">【官方文档】</a></p></div><h4 id="方式一-手动创建-nacos-配置信息" tabindex="-1"><a class="header-anchor" href="#方式一-手动创建-nacos-配置信息"><span>方式一：手动创建 Nacos 配置信息</span></a></h4><p>工程的 <code>${project_home}/platform/dante-cloud-monitor/resources/configs</code> 目录下，放置着所有需要导入到 <code>Nacos</code> 中的默认配置。开始其它工作之前，需要先在 Nacos 中创建所有配置</p><ol><li><p>访问 <code>Nacos</code> 后台管理，<a href="http://localhost:8848/nacos" target="_blank" rel="noopener noreferrer">默认本机地址</a>， 使用默认账号<code>nacos/nacos</code>登录。</p></li><li><p>在 <code>Nacos</code> 后台中，在 <code>配置管理 --&gt; 配置列表</code> 功能中，点击<strong>添加</strong>按钮，手动添加所有配置文件，操作如下图所示：</p></li></ol><figure><img src="'+o+'" alt="创建Nacos配置" tabindex="0" loading="lazy"><figcaption>创建Nacos配置</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>创建配置之前，请提前规划配置放置的命名空间（Namespace）。默认是放到 Nacos <code>public</code>命名空间中，如果不符合您的需求，可以在新建命名空间之后，再进行配置的创建。</li><li><code>${project_home}/platform/dante-cloud-monitor/resources/configs</code> 目录下，还有一级目录。这级目录的名称，是配置文件对应 <code>Nacos</code> 中的 <code>Group</code> 名称。所以在 <code>Nacos</code> 中新建配置时，一定要注意 <code>Group</code> 的创建和匹配。切勿全部新建到 <code>DEFAULT_GROUP</code> 组下，这样会导致无法正常运行。</li></ul></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>本项目所有<code>Nacos</code>配置，均是采用<code>yaml</code>格式。如需使用其它格式请自行修改</li><li>Dante Cloud 3.X 版本下，相关配置移动到 <code>${project_home}/configurations/backup/alibaba</code> 目录下</li></ol></div><h4 id="方式二-批量导入-nacos-配置" tabindex="-1"><a class="header-anchor" href="#方式二-批量导入-nacos-配置"><span>方式二：批量导入 Nacos 配置</span></a></h4><p>手动方式创建 Nacos 配置，比较繁琐和容易出错。为了使用提升使用的便捷性，在工程 <code>${project_home}/platform/dante-cloud-monitor/resources/imports</code> 目录下提供可以直接导入的配置包。可以方便的完成导入配置，创建<code>Group</code>等操作。</p><ol><li><p>访问 <code>Nacos</code> 后台管理，<a href="http://localhost:8848/nacos" target="_blank" rel="noopener noreferrer">默认本机地址</a>， 使用默认账号<code>nacos/nacos</code>登录。</p></li><li><p>在 <code>Nacos</code> 后台中，在 <code>配置管理 --&gt; 配置列表</code> 功能中，点击<strong>导入配置</strong>按钮，选择配置导入包即可，完成配置文件导入和 Group 的创建，操作如下图所示：</p></li></ol><figure><img src="'+k+'" alt="导入Nacos配置" tabindex="0" loading="lazy"><figcaption>导入Nacos配置</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>创建配置之前，请提前规划配置放置的命名空间（Namespace）。默认是放到 Nacos <code>public</code>命名空间中，如果不符合您的需求，可以在新建命名空间之后，再进行配置的创建。</li></ul></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Dante Cloud 3.X 版本下，相关配置移动到 <code>${project_home}/configurations/backup/alibaba</code> 目录下</p></div><h3 id="_4-修改-nacos-配置" tabindex="-1"><a class="header-anchor" href="#_4-修改-nacos-配置"><span>[4]修改 Nacos 配置</span></a></h3><p>上一步所导入的配置参数均是使用默认的、本地化的配置，需要根据自己搭建的基础设施环境，对相关的配置进行修改。</p><ol><li><p>访问 <code>Nacos</code> 后台管理，<a href="http://localhost:8848/nacos" target="_blank" rel="noopener noreferrer">默认本机地址</a>， 使用默认账号<code>nacos/nacos</code>登录。</p></li><li><p>找到对应的配置文件进行修改。常用的设置在 <code>dante-cloud-environment.yaml</code> 中即可修改完成，如果不满足您实际需求，可再到其它的配置文件中详细修改。</p></li></ol>',17)),s("div",m,[i[12]||(i[12]=n('<p class="hint-container-title">说明</p><p>为了方便使用，<strong>Dante Cloud</strong> 所有的配置采用**“共享式，统一化多环境配置模式”**设计，大多数配置在对应 <code>多环境</code> 的 <code>dante-cloud-environment.yaml</code> 配置中就可以完成修改。例如，您当前使用的是 <code>development</code> 环境，那么在 Nacos 后台管理中，找到 Group 是 <code>development</code> 的 <code>dante-cloud-environment.yaml</code> 配置修改。</p>',2)),s("p",null,[i[10]||(i[10]=s("strong",null,"Dante Cloud",-1)),i[11]||(i[11]=a(" 多环境配置设计及使用，参阅：")),e(t,{to:"/guide/backend/profile-design.html"},{default:l(()=>i[9]||(i[9]=[a("多环境配置")])),_:1})])]),i[25]||(i[25]=n(`<h3 id="_5-修改-pom-xml-配置" tabindex="-1"><a class="header-anchor" href="#_5-修改-pom-xml-配置"><span>[5]修改 pom.xml 配置</span></a></h3><p>在工程根目录下，找到 <code>pom.xml</code>， 修改对应 <code>profile</code> 中参数。由于使用的多环境，所以在该文件中，需要找到应环境的配置，修改该环境下的对应的配置信息。主要结构如下所示：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 开发 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;development&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">activation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--默认激活配置--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">activeByDefault</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;true&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">activeByDefault</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">activation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--当前环境--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;development&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">database</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;postgresql&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">database</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--基础设施：tencent、alibaba、spring--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">facility</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;alibaba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">facility</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--代码构建控制--&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--跳过构建源代码包--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">skip.build.source.package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;false&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">skip.build.source.package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--不copy代码包到docker构建目录--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">skip.copy.docker.resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;false&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">skip.copy.docker.resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--不执行git commit 构建--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">skip.build.git.commit.info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;false&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">skip.build.git.commit.info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--Spring Cloud Alibaba配置中心命名空间，用于支持多环境.这里必须使用ID，不能使用名称，默认为空--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">alibaba.namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2e4f5cf6-2ac8-4fe0-99be-b0562659c120&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">alibaba.namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--Spring Cloud Alibaba配置中心地址--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">alibaba.config.server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;192.168.101.10:8848&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">alibaba.config.server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--Spring Cloud Alibaba服务发现地址--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">alibaba.discovery.server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;192.168.101.10:8848&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">alibaba.discovery.server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">alibaba.sentinel.server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;192.168.101.10:8858&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">alibaba.sentinel.server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tencent.polaris.namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;default&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tencent.polaris.namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--Spring Cloud Tencent 配置 【(8091)grpc/tcp，默认注册中心端口;(8090)http/tcp，默认注册中心端口】--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tencent.polaris.server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;192.168.101.10:8091&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tencent.polaris.server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--Spring Cloud Tencent Config 配置 【(8093)grpc/tcp，默认配置中心端口】--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tencent.polaris.config-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;192.168.101.10:8093&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tencent.polaris.config-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!--Spring Cloud Tencent 本地缓存目录--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tencent.polaris.local.dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;./configurations/configs/tencent/backup/config&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tencent.polaris.local.dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>必须要修改的参数涉及以下几项：</p><ul><li><strong>alibaba.namespace</strong>：Nacos 命名空间 ID。如果要使用的是默认的命名空间，该参数不设置任何值。</li><li><strong>alibaba.config.server-addr</strong>：配置中心地址，即 Nacos 服务端地址</li><li><strong>alibaba.discovery.server-addr</strong>：服务发现地址，即 Nacos 服务端地址</li><li><strong>alibaba.sentinel.server-addr</strong>：Sentinel Dashborad 地址</li></ul>`,5)),s("p",null,[i[14]||(i[14]=a("详细参数说明，参阅：")),e(t,{to:"/guide/backend/profile-design.html"},{default:l(()=>i[13]||(i[13]=[a("多环境配置")])),_:1})]),i[26]||(i[26]=n(`<h3 id="_6-编译代码" tabindex="-1"><a class="header-anchor" href="#_6-编译代码"><span>[6]编译代码</span></a></h3><h4 id="编译方式一" tabindex="-1"><a class="header-anchor" href="#编译方式一"><span>编译方式一</span></a></h4><p>用命令行进入到工程代码所在根据目录，通过执行下面命令进行编译</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">或</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>推荐使用<code>install</code>命令，进行编译。使用该命令编译完成之后，会在<code>Maven</code>本地缓存中，生成相应的包，这样<code>dante-cloud-athena</code>功能就可以直接使用。</p></div><div class="hint-container caution"><p class="hint-container-title">警告</p><p>在第一次编译的时候，因为在本地缓存缺少相关的包，所以在执行 <code>mvn clean</code> 操作时会提示错误。因此，在第一次编译时只使用 <code>mvn package</code> 或 <code>mvn install</code>。第一次编译完成之后，就可以使用 <code>mvn clean package</code> 或 <code>mvn clean install</code> 命令进行编译。IDE 界面操作也是同理。</p></div><h4 id="编译方式二" tabindex="-1"><a class="header-anchor" href="#编译方式二"><span>编译方式二</span></a></h4><p>在 IDE 工程中，利用 IDE 提供的界面操作进行编译。</p><p>以<code>IDEA</code>为例，在右侧<code>Maven Panel</code>中，选择<code>dante-cloud(root)</code>节点，点击 Lifecycle 节点下的<code>install</code> 或者 <code>package</code> 进行编译。参考下图：</p><figure><img src="`+c+'" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>输入图片说明</figcaption></figure><h3 id="_7-运行服务模块和创建数据表" tabindex="-1"><a class="header-anchor" href="#_7-运行服务模块和创建数据表"><span>[7]运行服务模块和创建数据表</span></a></h3><h4 id="核心服务" tabindex="-1"><a class="header-anchor" href="#核心服务"><span>核心服务</span></a></h4><ol><li>UpmsApplication （用户中心服务 必需）</li><li>UaaApplication （统一认证服务 必需）</li><li>MessageApplication （平台消息服务 必需）</li><li>OssAbilityApplication （对象存储服务 必需）</li><li>GatewayApplication （服务网关服务 必需）</li></ol><blockquote><p>因 UpmsApplication 服务中包含权限数据汇总和分发机制，所以 UpmsApplication 服务要最先启动。UaaApplication、MessageApplication 和 OssAbilityApplication 服务启动顺序没有硬性要求。GatewayApplication 启动顺序没有硬性要求，建议可以放在最后启动</p></blockquote><h4 id="其它服务" tabindex="-1"><a class="header-anchor" href="#其它服务"><span>其它服务</span></a></h4><ol><li>MonitorApplication （监控中心服务 可选）</li><li>BpmnAbilityApplication （分布式工作流 可选）</li></ol><blockquote><p>建议 MonitorApplication 服务在所有服务启动之后，再行启动。</p></blockquote><div class="hint-container info"><p class="hint-container-title">说明</p><p>如果之前的配置没问题，同时 UpmsApplication、UaaApplication、MessageApplication、OssAbilityApplication 三个服务均可以正常启动，那么各个服务中涉及的数据表也会自动创建。</p><p>同时，在这个过程中各个服务会扫描自身所有的 REST 接口，将其汇总至 <code>sys_interface</code> 表中。</p></div>',18)),s("div",v,[i[17]||(i[17]=s("p",{class:"hint-container-title"},"注意",-1)),s("p",null,[i[16]||(i[16]=a("如果你使用的是 MySQL 数据库，可能存在因 JPA (Hibernate) 适配不同数据库的 Dialect 实现差异，会出现抛出错误信息等问题。一般情况下这不会影响系统运行和部署，而且这个问题也不是作者有能力修改的。所以如果在启动过程中，出现 MySQL 相关错误，不要急着说是系统问题，请查阅本文档相关部分的内容或自行百度进行一定了解。详情参阅：")),e(t,{to:"/guide/backend/data-initialization.html"},{default:l(()=>i[15]||(i[15]=[a("数据初始化")])),_:1})])]),i[27]||(i[27]=s("h3",{id:"_8-数据库初始化",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_8-数据库初始化"},[s("span",null,"[8]数据库初始化")])],-1)),s("p",null,[i[19]||(i[19]=a("具体操作方法，参阅：")),e(t,{to:"/guide/backend/data-initialization.html"},{default:l(()=>i[18]||(i[18]=[a("数据初始化")])),_:1})]),i[28]||(i[28]=n('<h3 id="_9-重置缓存" tabindex="-1"><a class="header-anchor" href="#_9-重置缓存"><span>[9]重置缓存</span></a></h3><p>有过项目开发经验，特别是有过数据库数据缓存使用经验的朋友肯定都知道：如果系统中使用了数据库数据缓存，那么直接手动修改数据库的数据，就会导致数据库数据和缓存数据的不一致，而出现系统界面操作或显示，与预期不一致的情况。想要解决这类问题，要么在有条件的情况下清除缓存让缓存再重新生成，要么就只能等待相关查询产生的缓存过期后再次出发查询操作重新生成。</p><p>说明缓存这个问题的原因是，本系统中默认也启动了缓存，而且是多级缓存（Caffeine 本地 + Redis 远程）。这就导致一定会出现上面所说的问题，特别是在第一次搭建本系统时，如果某个步骤顺序错误，比如：数据库没有进行初始化，就运行前端界面进行操作，那么就会产生错误的缓存（JPA (Hibernate) 是基于 SQL 语句进行数据缓存的）</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>所以为了规避因缓存原因而产生让人莫名奇妙的问题，在以上步骤均完成之后（<strong>数据库初始化完成之后</strong>），一定要按照以下步骤进行缓存重置</p><ol><li>停止所有服务</li><li>清空 Redis 缓存数据</li><li>再次运行所有服务</li></ol></div><h3 id="_10-运行-elk-可选" tabindex="-1"><a class="header-anchor" href="#_10-运行-elk-可选"><span>[10]运行 ELK（可选）</span></a></h3><p>完整运行本套微服务架构，需要搭建 <code>ELK</code> 套件，作为日志中心以及 <code>Skywalking</code> 链路追踪的数据存储介质。</p><p>目前已有基础功能尚未涉及到搜索，只有日志中心和链路追踪功能涉及到 <code>Elasticsearch</code>。如果本地开发不要相关功能，就不需要安装和运行<code>ELK</code>套件。</p>',7)),s("blockquote",null,[s("p",null,[i[21]||(i[21]=a("如果已经安装了可运行的 ELK 套件，或者其它组合，请略过该步骤。如果觉得单独安装麻烦，建议以 Docker 的方式安装运行，本系统提供了 docker-compose 安装脚本，参见章节：")),e(t,{to:"/microservices/container-deployment.html"},{default:l(()=>i[20]||(i[20]=[a("容器化部署")])),_:1})])]),i[29]||(i[29]=n('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果本地不想使用 <code>ELK</code>，那么需要关闭微服务的日志收集功能。</p><p>修改你所使用 <code>多环境</code> 对应的 <code>dante-cloud-environment.yaml</code> 配置中的 <code>herodotus.environment.logstash-server-addr</code> 属性的值，将其值设置成 <code>false</code> ，即可关闭日志收集功能，就解除服务对 <code>ELK</code> 的依赖</p></div><h3 id="_11-运行-skywalking-可选" tabindex="-1"><a class="header-anchor" href="#_11-运行-skywalking-可选"><span>[11]运行 Skywalking（可选）</span></a></h3><p>完整运行本套微服务架构，需要搭建 <code>ELK</code> 套件，作为日志中心以及<code>Skywalking</code>链路追踪的数据存储介质。正式环境运行建议使用 <code>Docker</code> 或 <code>K8S</code> 的方式运行 <code>Skywalking</code>，并以 <code>Docker</code> 的形式运行服务。</p><p>如果仅是在本地运行调试服务与 <code>Skywalking</code> 的联动，可以在 IDE 中增加参数后，再运行服务即可。</p><p>以 IDEA 为例，点开 <code>Edit Configurations...</code>，在对应服务的 <code>VM Options</code> 输入框中添加如下参数即可调试 <code>Skywalking</code></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-javaagent:D:/Workspaces/Java/herodotus-cloud/configurations/docker/context/agent/skywalking-agent-es7-8.6.0.jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=agent.service_name=herodotus-cloud-upms，collector.backend_service=192.168.101.10:11800</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>操作界面如下图所示，IDEA 版本不同配置方式会有差异</p><figure><img src="'+g+`" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>输入图片说明</figcaption></figure><h3 id="_12-以-docker-方式部署-可选" tabindex="-1"><a class="header-anchor" href="#_12-以-docker-方式部署-可选"><span>[12]以 Docker 方式部署（可选）</span></a></h3><p>参见：<a href="https://www.herodotus.vip/get-started/install/" target="_blank" rel="noopener noreferrer">容器化部署</a></p><h3 id="_13-运行验证" tabindex="-1"><a class="header-anchor" href="#_13-运行验证"><span>[13]运行验证</span></a></h3><p>以上步骤完成之后，工程后端整体搭建部署完成。可以通过运行前端界面进行操作或者用 <code>Postman</code> 调用接口的方式进行验证。</p><p>如果界面操作正常，或者接口调用正常，则说明工程已经正确部署。更多验证，参阅：<a href="https://www.herodotus.vip/guide/develop/grant.html" target="_blank" rel="noopener noreferrer">OAuth2 授权标准</a></p><h2 id="三-前端运行" tabindex="-1"><a class="header-anchor" href="#三-前端运行"><span>[三]前端运行</span></a></h2><h3 id="_1-检出代码" tabindex="-1"><a class="header-anchor" href="#_1-检出代码"><span>[1]检出代码</span></a></h3><p>在合适位置上，使用 Git 检出前端工程代码。<a href="https://gitee.com/dromara/dante-cloud-ui" target="_blank" rel="noopener noreferrer">项目地址</a></p><h3 id="_2-修改配置" tabindex="-1"><a class="header-anchor" href="#_2-修改配置"><span>[2]修改配置</span></a></h3><p>在前端工程的 packages/ui 目录下，找到 <code>.env.development</code> 或者 <code>.env.production</code> 文件。修改其中的参数</p><div class="hint-container info"><p class="hint-container-title">参数说明</p><ul><li><strong>NODE_ENV</strong>：当前多环境名称，不用修改</li><li><strong>VITE_PROJECT</strong>：工程名称，名称。通过该参数以动态修改域名以外的地址，以实现单体版等使用同一套操作界面。<code>dante</code>指定是微服务版，其它任意字符串或者空值指定是单体版</li><li><strong>VITE_PROJECT_NAME</strong>：界面显示的系统名称</li><li><strong>VITE_API_URL</strong>：后端服务网关访问地址</li><li><strong>VITE_WS_URL</strong>：后端服务 WebSocket 访问地址</li><li><strong>VITE_SECRET_KEY</strong>：前端关键信息 SM4 加密秘钥</li><li><strong>VITE_AUTO_REFRESH_TOKEN</strong>：开启自动刷新 Token 机制</li><li><strong>VITE_MULTI_TENANCY_ID</strong>：当前应用租户 ID，需要后台进行租户配置，空值为不启用租户模式。</li><li><strong>VITE_USE_CRYPTO</strong>：是否开启前后端数据加密</li><li><strong>VITE_USE_WEBSOCKET</strong>：是否开启 WebSocket</li><li><strong>VITE_USE_OIDC</strong>：是否使用 OpenID Connect（OIDC） 协议</li><li><strong>VITE_OAUTH_CLIENT_ID</strong>：OAuth2 密码模式 Client Id。</li><li><strong>VITE_OAUTH_CLIENT_SECRET</strong>：OAuth2 密码模式 Client 密码</li><li><strong>VITE_OAUTH_GRANT_TYPE</strong>：OAuth2 授权模式</li></ul></div><div class="hint-container info"><p class="hint-container-title">说明</p><p><code>VITE_SECRET_KEY</code> 秘钥，并不是本系统前后端数据加密传输使用的秘钥，只是对前端临时存储的关键信息加密的秘钥。</p><p>本系统前后端数据加密传输，是基于自主设计的自定义数据传输 Session，实现国密 SM4 加密秘钥的动态生成，加密传输，一人一钥机制。每次使用系统都会动态重新生成，采用 SM2 前后端加密传输，临时存储至前端。缓存时间与 <code>OAuth 2 Token</code> 设置时间相同，正常退出系统后，会清除前端临时存储数据。</p><blockquote><p>并没有绝对安全的加密措施，前后端数据加密传输也仅仅是相对提升安全性。毕竟不管如何处理，前端都要存储一定的关键信息，而且前端是最容易破解的。正式环境使用还是要配合 <code>Https</code> 以及其它安全防护措施。</p></blockquote></div><h3 id="_3-前端运行命令" tabindex="-1"><a class="header-anchor" href="#_3-前端运行命令"><span>[3]前端运行命令</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 进入目录</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dante-cloud-ui</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以自己编译一下组件库</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shared:build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如果要使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">.env.development</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> 中的配置值，使用下面命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如果要使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">.env.production</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> 中的配置值，编译整个项目，则使用下面命令。一般只有在前端进行正式部署时才会用到这个命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prod</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-运行验证" tabindex="-1"><a class="header-anchor" href="#_4-运行验证"><span>[4]运行验证</span></a></h3><p>打开浏览器，输入：<a href="http://localhost:3000" target="_blank" rel="noopener noreferrer">http://localhost:3000</a></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>系统登录默认的账户和密码是：<strong>system/123456</strong></p></div><blockquote><p>若能正确展示登录页面，并能成功登录，菜单及页面展示正常，则表明环境搭建成功</p></blockquote><div class="hint-container info"><p class="hint-container-title">重申</p><p>不要再到交流群里面问系统登录默认的用户名和密码了、不要再口口声声说在文档里 <strong>“确实找不到”</strong> 用户名和密码！！！</p><ol><li>如果连看文档的耐心都没有，个人认为就不合适搞 IT。说找不到用户名密码的，至少是文档不仔细看或懒得看。</li><li>不管是因为懒惰、想快还是什么其它原因，觉得文档不值得看，这都是个人的选择，本就无可厚非。但是自己不看，非要去群里问，让别人告诉你，这就是在浪费别人的善意和时间，就是不厚道，也别怪群里没人愿意回复。</li></ol></div>`,27))])}const f=p(A,[["render",b],["__file","deployment.html.vue"]]),C=JSON.parse('{"path":"/guide/get-start/deployment.html","title":"环境部署","lang":"zh-CN","frontmatter":{"icon":"caret-right","title":"环境部署","tag":["SAS","Spring Authorization Server","Dante Cloud","微服务","领域驱动","DDD","Spring Boot","Spring Cloud","Spring Security","Spring Cloud Alibaba","Spring Cloud Tencent","OAuth2.1","Nacos","Skywalking","Sentinel","Seata"],"description":"声明 部署是了解本项目和微服务的第一步，建议第一次部署一定严格按照文档描述进行操作，保证系统可以正常运行之后，并且对现有内容有了一定认识之后，在按照自己的进行修改或变更。 提示 如果急于部署只是为了看看界面长个什么样子，尝个鲜。建议直接部署单体版，搭个数据库和 Nodejs 环境即可，省时省力快捷。 [一]准备工作 后端运行所需的基础设施 (1) 后端...","head":[["meta",{"property":"og:url","content":"https://dante-cloud.dromara.org/guide/get-start/deployment.html"}],["meta",{"property":"og:site_name","content":"“一套代码、两种架构”基于Apache2.0开源协议的企业级微服务"}],["meta",{"property":"og:title","content":"环境部署"}],["meta",{"property":"og:description","content":"声明 部署是了解本项目和微服务的第一步，建议第一次部署一定严格按照文档描述进行操作，保证系统可以正常运行之后，并且对现有内容有了一定认识之后，在按照自己的进行修改或变更。 提示 如果急于部署只是为了看看界面长个什么样子，尝个鲜。建议直接部署单体版，搭个数据库和 Nodejs 环境即可，省时省力快捷。 [一]准备工作 后端运行所需的基础设施 (1) 后端..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://dante-cloud.dromara.org/assets/image/nacos/config-create.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-21T09:34:36.000Z"}],["meta",{"property":"article:tag","content":"SAS"}],["meta",{"property":"article:tag","content":"Spring Authorization Server"}],["meta",{"property":"article:tag","content":"Dante Cloud"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"领域驱动"}],["meta",{"property":"article:tag","content":"DDD"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"Spring Cloud"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:tag","content":"Spring Cloud Alibaba"}],["meta",{"property":"article:tag","content":"Spring Cloud Tencent"}],["meta",{"property":"article:tag","content":"OAuth2.1"}],["meta",{"property":"article:tag","content":"Nacos"}],["meta",{"property":"article:tag","content":"Skywalking"}],["meta",{"property":"article:tag","content":"Sentinel"}],["meta",{"property":"article:tag","content":"Seata"}],["meta",{"property":"article:modified_time","content":"2025-03-21T09:34:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"环境部署\\",\\"image\\":[\\"https://dante-cloud.dromara.org/assets/image/nacos/config-create.png\\",\\"https://dante-cloud.dromara.org/assets/image/nacos/config-import.png\\",\\"https://dante-cloud.dromara.org/assets/image/idea/lifecycle.png\\",\\"https://dante-cloud.dromara.org/assets/image/idea/local-skywalking.jpeg\\"],\\"dateModified\\":\\"2025-03-21T09:34:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"码匠君\\",\\"url\\":\\"https://gitee.com/dromara/dante-cloud\\"}]}"],["meta",{"name":"keywords","content":"SAS,Spring Authorization Server,Dante Cloud,微服务,DDD,Spring Boot,Spring Cloud,Spring Cloud Alibaba,Spring Cloud Tencent,Nacos,WebFlux,RSocket,GPRC,Minio"}],["script",{},"var _hmt = _hmt || [];\\n            (function() {\\n              var hm = document.createElement(\\"script\\");\\n              hm.src = \\"https://hm.baidu.com/hm.js?9d06530da5dbac9ce977a65ddf8e1cc0\\";\\n              var s = document.getElementsByTagName(\\"script\\")[0]; \\n              s.parentNode.insertBefore(hm, s);\\n            })();"]]},"git":{"createdTime":1742549676000,"updatedTime":1742549676000,"contributors":[{"name":"码匠君","username":"码匠君","email":"pointer_v@qq.com","commits":1,"url":"https://github.com/码匠君"}]},"readingTime":{"minutes":17.97,"words":5392},"filePathRelative":"guide/get-start/deployment.md","localizedDate":"2025年3月21日","autoDesc":true}');export{f as comp,C as data};
