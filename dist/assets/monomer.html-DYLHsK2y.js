import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as o,a as e,e as i,d as n,w as s,r as p,o as d}from"./app--z_snunk.js";const h={};function k(g,t){const a=p("RouteLink");return d(),r("div",null,[t[20]||(t[20]=o('<h2 id="一-简介" tabindex="-1"><a class="header-anchor" href="#一-简介"><span>[一]简介</span></a></h2><p>Dante Cloud 除了提供一套完整的微服务架构以外，还支持以单体架构运行。这里的微服务架构和单体架构并不是分离的两套代码，也不是分离的两个项目。而是完全融合的一整套代码，使用时可以根据需要选择是以微服务模式或者单体模式运行。这是 Dante Cloud 微服务最大的特色之一：<strong>“一套代码、两种架构”</strong>。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>自 v3.3.4.2 版本起，为了减少误解，单体版不再采用独立的代码仓库，相关模块和配置统一合并至微服务版本工程中。在同一工程中，就可以选择启动单体版本或者微服务版。解决原有模式下，需要单独编译微服务版，再开启另一个工程中启动单体版。提升开发和使用的便捷性。</p></div><h3 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景"><span>[1]背景</span></a></h3><p>之所以会衍生出 Dante Cloud 单体版（Athena），主要是出于以下两方面考虑：</p><ul><li>一方面，不管是单独搭建单体后台管理脚手架，还是构建基于 Spring Cloud 的分布式微服务架构，只要是前后端分离并且是基于 <code>Spring Authorization Server</code> 和 <code>Spring Security</code> 等 Spring 生态组件构建的系统，使用方式以及大部分代码都是相同的，完全可以通用，没有必要编写两套增加维护工作。</li><li>另一方面，基于 <code>Spring Boot</code> 和 <code>Spring Cloud</code> 的微服务架构，已经成为应用建设的主流方案。但不可否认的是，搭建一套微服务架构所需的基础设施越来越多，也越来越复杂，所需的配套资源也越来越庞大。仅仅是在开发电脑上搭建一套运行开发调试环境，其复杂度和所需的资源也不容小觑。而很多应用特别是小型应用，在早期开发中或者用户量不大的前期，很多情况下一套单体的，前后端分离的后台就足以满足。完全没有必要上一整套微服务，额外增加复杂度。</li></ul><p>Dante Cloud 单体版具体以下特点：</p><ol><li>不需要搭建 Nacos，ELK，Sentinel，Skywalking 等诸多基础设施，只要一个数据库和Redis就可以独立运行，具备微服务架构除分布式以外的所有功能。</li><li>代码开发调试以及系统运行速度，相较于微服务版本有几倍的提升。</li><li>只要自己开发的业务代码规范，子模块划分合理，可以快速无缝的从单体架构迁移到微服务架构。</li></ol><p>这些特点助于在项目早期快速建设项目、方便开发人员在本地进行开发以及新技术研究。在项目后期随着用户规模增大以及并发需求提升时，快速迁移至微服务模式。</p><h3 id="_2-结构" tabindex="-1"><a class="header-anchor" href="#_2-结构"><span>[2]结构</span></a></h3><p>在项目主工程中，模块 <code>dante-monomer-application</code> 就是 Dante Cloud 单体版应用。在 IDEA 中，运行名为 <code>AthenaApplication</code> 的 <code>服务</code> 就可以启动单体版本。</p><p>本质上就是搭建了一个标准的 Spring Boot 工程，依赖了 <code>authentication-spring-boot-starter</code> 模块就形成了 Dante Cloud 单体版本的主体结构和主要功能。<code>authentication-spring-boot-starter</code> 模块也是 Dante Cloud 微服务版本中，UAA 服务的核心依赖组件。</p><p>通过调整和增减所依赖的核心库中的组件，就可以在单体版本中增加或者删减相关的功能。例如：系统中的对象存储支持，就是通过依赖平台提供的 <code>oss-spring-boot-starter</code> 模块的实现的。</p><p>由此可以看出，Dante Cloud 单体版（Athena）是与 Dante Cloud 微服务系统完全融合在一起的，是通过代码的高度抽象和通用化，加上高度策略化的定制自然而然形成的。<strong>这也从另外的角度证明了 Dante Cloud 代码的质量和水平</strong></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Dante Cloud 单体版（Athena），仍旧是前后端分离的架构。这里为什么强调 <code>前后端分离</code>？因为，前后端不分离的架构（也就是我们常说的前端页面和后端代码混合在一起的传统单体架构），核心功能均是围绕 Session 进行开发和设计的。这与基于 Token 的、前后端分离架构，在功能设计和开发思维方式方面有较大差异。切记 <strong>生搬硬套</strong></p></div><h2 id="二-后端运行" tabindex="-1"><a class="header-anchor" href="#二-后端运行"><span>[二]后端运行</span></a></h2>',16)),e("p",null,[t[1]||(t[1]=i("单体版本后端需要的基础设施组件非常简单，仅需要数据库和Redis即可。这里就略过具体的安装和部署说明，需要了解相关的内容，可以查阅 ")),n(a,{to:"/guide/get-start/deployment.html"},{default:s(()=>t[0]||(t[0]=[i("【环境部署】")])),_:1,__:[0]}),t[2]||(t[2]=i(" 章节"))]),t[21]||(t[21]=o(`<h3 id="_1-创建数据" tabindex="-1"><a class="header-anchor" href="#_1-创建数据"><span>[1]创建数据</span></a></h3><p>这里以 PostgreSQL 为例，在 PostgreSQL 自带的命令行工具中，执行以下命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 创建用户</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> athena</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 密码是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> athena</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CREATE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> USER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> athena</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> WITH</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PASSWORD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;athena&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 创建数据库</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> athena,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 并将用户</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> athena</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分配给该数据</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CREATE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DATABASE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> athena</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> OWNER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> athena</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 将数据库</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> athena</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的所有权限分配给</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> athena</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GRANT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ALL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PRIVILEGES</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ON</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DATABASE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> athena</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> athena</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-编译代码" tabindex="-1"><a class="header-anchor" href="#_2-编译代码"><span>[2]编译代码</span></a></h3>`,4)),e("p",null,[t[4]||(t[4]=i("检出工程代码，进行编译。这里与微服务版本相关操作相同，需要了解相关的内容，可以查阅 ")),n(a,{to:"/guide/get-start/deployment.html#_1-%E6%A3%80%E5%87%BA%E4%BB%A3%E7%A0%81"},{default:s(()=>t[3]||(t[3]=[i("【检出代码创建工程章节】")])),_:1,__:[3]}),t[5]||(t[5]=i(" 章节"))]),t[22]||(t[22]=o('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>自 3.3.5.0 版本起，为了提升使用的便捷性，单体版代码已经合并至 Herodotus Cloud 工程中。无需再像原来一样，需要检出两个工程，要先编译 Herodotus Cloud 工程代码，才能使用单体版本。</p></div><h3 id="_3-创建数据表" tabindex="-1"><a class="header-anchor" href="#_3-创建数据表"><span>[3]创建数据表</span></a></h3><p>代码检出后，在工程中找到 <code>dante-monomer-application</code>, 修改工程下 <code>appliation.yml</code> 中相关的配置信息。主要修改数据库连接和Redis连接即可。</p><p>然后，启动 <code>AthenaApplication</code> 应用。<code>AthenaApplication</code> 正常启动之后，会自动创建数据表以及自动完成基础信息的采集。</p><blockquote><p>如果看到有数据库表创建，同时<code>sys_authority</code>、<code>sys_interface</code>、<code>sys_attribute</code> 等表中有数据，证明数据库表创建成功。</p></blockquote><h3 id="_4-数据库初始化" tabindex="-1"><a class="header-anchor" href="#_4-数据库初始化"><span>[4]数据库初始化</span></a></h3>',6)),e("p",null,[t[7]||(t[7]=i("在工程中 ")),t[8]||(t[8]=e("code",null,"herodotus-monomer-application",-1)),t[9]||(t[9]=i(" 模块下，找到数据库初始化脚本，初始化数据。这里原理与微服务版本相同，如果想要使用自动初始化操作，可以查阅 ")),n(a,{to:"/guide/backend/data-initialization.html"},{default:s(()=>t[6]||(t[6]=[i("【数据库初始化】")])),_:1,__:[6]}),t[10]||(t[10]=i(" 章节"))]),t[23]||(t[23]=e("h3",{id:"_5-重置缓存",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-重置缓存"},[e("span",null,"[5]重置缓存")])],-1)),e("p",null,[t[12]||(t[12]=i("原理和设计与微服务版本完全想通，可以查阅 ")),n(a,{to:"/guide/get-start/deployment.html#_9-%E9%87%8D%E7%BD%AE%E7%BC%93%E5%AD%98"},{default:s(()=>t[11]||(t[11]=[i("【重置缓存】")])),_:1,__:[11]}),t[13]||(t[13]=i(" 章节"))]),t[24]||(t[24]=o('<h3 id="_6-启动服务" tabindex="-1"><a class="header-anchor" href="#_6-启动服务"><span>[6]启动服务</span></a></h3><p>以上步骤操作完成之后，再次启动 <code>AthenaApplication</code> 应用即可以使用。整个安装部署工作就完成了。</p><h2 id="三-前端运行" tabindex="-1"><a class="header-anchor" href="#三-前端运行"><span>[三]前端运行</span></a></h2><h3 id="_1-部署编译" tabindex="-1"><a class="header-anchor" href="#_1-部署编译"><span>[1]部署编译</span></a></h3>',4)),e("p",null,[t[15]||(t[15]=i("Dante Cloud Athena（单体版）前端与 Dante Cloud（微服务版）前端，使用的是同一套代码。所以，部署方式和运行方式，与微服务版本完全相同，具体可以查阅 ")),n(a,{to:"/guide/get-start/deployment.html#%E4%B8%89%E5%89%8D%E7%AB%AF%E8%BF%90%E8%A1%8C"},{default:s(()=>t[14]||(t[14]=[i("前端系统运行")])),_:1,__:[14]}),t[16]||(t[16]=i(" 章节。"))]),t[25]||(t[25]=e("div",{class:"hint-container important"},[e("p",{class:"hint-container-title"},"重要"),e("p",null,[i("这里唯一需要注意的是，前端工程有一个参数 "),e("code",null,"VITE_PROJECT"),i(" 需要进行特别的修改。")]),e("p",null,[e("code",null,"VITE_PROJECT"),i(" 的值，如果是 "),e("code",null,"herodotus"),i(" 则表示是微服务版，其它任意字符串或者空值指定是单体版")])],-1)),t[26]||(t[26]=e("h3",{id:"_2-运行验证",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-运行验证"},[e("span",null,"[2]运行验证")])],-1)),e("p",null,[t[18]||(t[18]=i("Dante Cloud Athena（单体版）前端的运行验证方式也与 Dante Cloud（微服务版）前端完全相同，具体可以查阅 ")),n(a,{to:"/guide/get-start/deployment.html#%E4%B8%89%E5%89%8D%E7%AB%AF%E8%BF%90%E8%A1%8C"},{default:s(()=>t[17]||(t[17]=[i("前端系统运行")])),_:1,__:[17]}),t[19]||(t[19]=i(" 章节。"))])])}const m=l(h,[["render",k]]),A=JSON.parse('{"path":"/guide/backend/monomer.html","title":"单体版运行","lang":"zh-CN","frontmatter":{"icon":"caret-right","title":"单体版运行","tag":["SAS","Spring Authorization Server","Dante Cloud","微服务","领域驱动","DDD","Spring Boot","Spring Cloud","Spring Security","Spring Cloud Alibaba","Spring Cloud Tencent","OAuth2.1","Nacos","Skywalking","Sentinel","Seata"],"description":"[一]简介 Dante Cloud 除了提供一套完整的微服务架构以外，还支持以单体架构运行。这里的微服务架构和单体架构并不是分离的两套代码，也不是分离的两个项目。而是完全融合的一整套代码，使用时可以根据需要选择是以微服务模式或者单体模式运行。这是 Dante Cloud 微服务最大的特色之一：“一套代码、两种架构”。 重要 自 v3.3.4.2 版本起...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单体版运行\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-26T16:27:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"码匠君\\",\\"url\\":\\"https://gitee.com/dromara/dante-cloud\\"}]}"],["meta",{"property":"og:url","content":"https://dante-cloud.dromara.org/guide/backend/monomer.html"}],["meta",{"property":"og:site_name","content":"“一套代码、两种架构”基于Apache2.0开源协议的企业级微服务"}],["meta",{"property":"og:title","content":"单体版运行"}],["meta",{"property":"og:description","content":"[一]简介 Dante Cloud 除了提供一套完整的微服务架构以外，还支持以单体架构运行。这里的微服务架构和单体架构并不是分离的两套代码，也不是分离的两个项目。而是完全融合的一整套代码，使用时可以根据需要选择是以微服务模式或者单体模式运行。这是 Dante Cloud 微服务最大的特色之一：“一套代码、两种架构”。 重要 自 v3.3.4.2 版本起..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-26T16:27:48.000Z"}],["meta",{"property":"article:tag","content":"Seata"}],["meta",{"property":"article:tag","content":"Sentinel"}],["meta",{"property":"article:tag","content":"Skywalking"}],["meta",{"property":"article:tag","content":"Nacos"}],["meta",{"property":"article:tag","content":"OAuth2.1"}],["meta",{"property":"article:tag","content":"Spring Cloud Tencent"}],["meta",{"property":"article:tag","content":"Spring Cloud Alibaba"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:tag","content":"Spring Cloud"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"DDD"}],["meta",{"property":"article:tag","content":"领域驱动"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"Dante Cloud"}],["meta",{"property":"article:tag","content":"Spring Authorization Server"}],["meta",{"property":"article:tag","content":"SAS"}],["meta",{"property":"article:modified_time","content":"2025-05-26T16:27:48.000Z"}],["meta",{"name":"keywords","content":"SAS,Spring Authorization Server,Dante Cloud,微服务,DDD,Spring Boot,Spring Cloud,Spring Cloud Alibaba,Spring Cloud Tencent,Nacos,WebFlux,RSocket,GPRC,Minio"}],["script",{},"var _hmt = _hmt || [];\\n            (function() {\\n              var hm = document.createElement(\\"script\\");\\n              hm.src = \\"https://hm.baidu.com/hm.js?9d06530da5dbac9ce977a65ddf8e1cc0\\";\\n              var s = document.getElementsByTagName(\\"script\\")[0]; \\n              s.parentNode.insertBefore(hm, s);\\n            })();"]]},"git":{"createdTime":1748276868000,"updatedTime":1748276868000,"contributors":[{"name":"码匠君","username":"","email":"pointer_v@qq.com","commits":1}]},"readingTime":{"minutes":6.43,"words":1928},"filePathRelative":"guide/backend/monomer.md","autoDesc":true}');export{m as comp,A as data};
